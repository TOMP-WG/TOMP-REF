# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.asset_type import AssetType  # noqa: F401,E501
from swagger_server.models.booking_extra_data import BookingExtraData  # noqa: F401,E501
from swagger_server.models.booking_request import BookingRequest  # noqa: F401,E501
from swagger_server.models.booking_state import BookingState  # noqa: F401,E501
from swagger_server.models.leg import Leg  # noqa: F401,E501
from swagger_server import util


class Booking(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, _from=None, callback_url: str=None, to=None, customer=None, state: BookingState=None, legs: List[Leg]=None, pricing=None, departure_time: datetime=None, arrival_time: datetime=None, main_asset_type: AssetType=None, extra_data: BookingExtraData=None):  # noqa: E501
        """Booking - a model defined in Swagger

        :param id: The id of this Booking.  # noqa: E501
        :type id: str
        :param _from: The _from of this Booking.  # noqa: E501
        :type _from: any
        :param callback_url: The callback_url of this Booking.  # noqa: E501
        :type callback_url: str
        :param to: The to of this Booking.  # noqa: E501
        :type to: any
        :param customer: The customer of this Booking.  # noqa: E501
        :type customer: any
        :param state: The state of this Booking.  # noqa: E501
        :type state: BookingState
        :param legs: The legs of this Booking.  # noqa: E501
        :type legs: List[Leg]
        :param pricing: The pricing of this Booking.  # noqa: E501
        :type pricing: any
        :param departure_time: The departure_time of this Booking.  # noqa: E501
        :type departure_time: datetime
        :param arrival_time: The arrival_time of this Booking.  # noqa: E501
        :type arrival_time: datetime
        :param main_asset_type: The main_asset_type of this Booking.  # noqa: E501
        :type main_asset_type: AssetType
        :param extra_data: The extra_data of this Booking.  # noqa: E501
        :type extra_data: BookingExtraData
        """
        self.swagger_types = {
            'id': str,
            '_from': any,
            'callback_url': str,
            'to': any,
            'customer': any,
            'state': BookingState,
            'legs': List[Leg],
            'pricing': any,
            'departure_time': datetime,
            'arrival_time': datetime,
            'main_asset_type': AssetType,
            'extra_data': BookingExtraData
        }

        self.attribute_map = {
            'id': 'id',
            '_from': 'from',
            'callback_url': 'callbackUrl',
            'to': 'to',
            'customer': 'customer',
            'state': 'state',
            'legs': 'legs',
            'pricing': 'pricing',
            'departure_time': 'departureTime',
            'arrival_time': 'arrivalTime',
            'main_asset_type': 'mainAssetType',
            'extra_data': 'extraData'
        }
        self._id = id
        self.__from = _from
        self._callback_url = callback_url
        self._to = to
        self._customer = customer
        self._state = state
        self._legs = legs
        self._pricing = pricing
        self._departure_time = departure_time
        self._arrival_time = arrival_time
        self._main_asset_type = main_asset_type
        self._extra_data = extra_data

    @classmethod
    def from_dict(cls, dikt) -> 'Booking':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The booking of this Booking.  # noqa: E501
        :rtype: Booking
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Booking.

        A unique identifier for the TO to know this booking by  # noqa: E501

        :return: The id of this Booking.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Booking.

        A unique identifier for the TO to know this booking by  # noqa: E501

        :param id: The id of this Booking.
        :type id: str
        """

        self._id = id

    @property
    def _from(self) -> any:
        """Gets the _from of this Booking.

        information about the origin, only to supply when requested in the conditionRequireBookingData  # noqa: E501

        :return: The _from of this Booking.
        :rtype: any
        """
        return self.__from

    @_from.setter
    def _from(self, _from: any):
        """Sets the _from of this Booking.

        information about the origin, only to supply when requested in the conditionRequireBookingData  # noqa: E501

        :param _from: The _from of this Booking.
        :type _from: any
        """

        self.__from = _from

    @property
    def callback_url(self) -> str:
        """Gets the callback_url of this Booking.

        The callback URL of the Maas Provider, to use as base url for callback, f.x. the POST legs/{id}/events and POST /bookings/{id}/events. Only to be provided when this deviates from standard or agreed URL.  # noqa: E501

        :return: The callback_url of this Booking.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url: str):
        """Sets the callback_url of this Booking.

        The callback URL of the Maas Provider, to use as base url for callback, f.x. the POST legs/{id}/events and POST /bookings/{id}/events. Only to be provided when this deviates from standard or agreed URL.  # noqa: E501

        :param callback_url: The callback_url of this Booking.
        :type callback_url: str
        """

        self._callback_url = callback_url

    @property
    def to(self) -> any:
        """Gets the to of this Booking.

        information about the destination, only to supply when requested in the conditionRequireBookingData  # noqa: E501

        :return: The to of this Booking.
        :rtype: any
        """
        return self._to

    @to.setter
    def to(self, to: any):
        """Sets the to of this Booking.

        information about the destination, only to supply when requested in the conditionRequireBookingData  # noqa: E501

        :param to: The to of this Booking.
        :type to: any
        """

        self._to = to

    @property
    def customer(self) -> any:
        """Gets the customer of this Booking.

        The user that wants to make this booking, only to supply when requested in the conditionRequireBookingData  # noqa: E501

        :return: The customer of this Booking.
        :rtype: any
        """
        return self._customer

    @customer.setter
    def customer(self, customer: any):
        """Sets the customer of this Booking.

        The user that wants to make this booking, only to supply when requested in the conditionRequireBookingData  # noqa: E501

        :param customer: The customer of this Booking.
        :type customer: any
        """

        self._customer = customer

    @property
    def state(self) -> BookingState:
        """Gets the state of this Booking.


        :return: The state of this Booking.
        :rtype: BookingState
        """
        return self._state

    @state.setter
    def state(self, state: BookingState):
        """Sets the state of this Booking.


        :param state: The state of this Booking.
        :type state: BookingState
        """

        self._state = state

    @property
    def legs(self) -> List[Leg]:
        """Gets the legs of this Booking.

        The legs of this booking, generally just one for simple legs, in order of how they will be travelled. If this part is not present, it means that there is only one leg. This leg can be constructed * leg[0].id = booking.id * leg[0].departureTime = booking.departureTime * leg[0].arrivalTime = booking.arrivalTime * leg[0].assetType = booking.mainAssetType * leg[0].pricing = booking.pricing This approach is not allowed in the trip execution part  # noqa: E501

        :return: The legs of this Booking.
        :rtype: List[Leg]
        """
        return self._legs

    @legs.setter
    def legs(self, legs: List[Leg]):
        """Sets the legs of this Booking.

        The legs of this booking, generally just one for simple legs, in order of how they will be travelled. If this part is not present, it means that there is only one leg. This leg can be constructed * leg[0].id = booking.id * leg[0].departureTime = booking.departureTime * leg[0].arrivalTime = booking.arrivalTime * leg[0].assetType = booking.mainAssetType * leg[0].pricing = booking.pricing This approach is not allowed in the trip execution part  # noqa: E501

        :param legs: The legs of this Booking.
        :type legs: List[Leg]
        """

        self._legs = legs

    @property
    def pricing(self) -> any:
        """Gets the pricing of this Booking.

        The pricing information of the overall booking, in addition to any leg pricing, if not all legs have pricing the booking should have the fare  # noqa: E501

        :return: The pricing of this Booking.
        :rtype: any
        """
        return self._pricing

    @pricing.setter
    def pricing(self, pricing: any):
        """Sets the pricing of this Booking.

        The pricing information of the overall booking, in addition to any leg pricing, if not all legs have pricing the booking should have the fare  # noqa: E501

        :param pricing: The pricing of this Booking.
        :type pricing: any
        """

        self._pricing = pricing

    @property
    def departure_time(self) -> datetime:
        """Gets the departure_time of this Booking.

        The initial departure time (over all legs)  # noqa: E501

        :return: The departure_time of this Booking.
        :rtype: datetime
        """
        return self._departure_time

    @departure_time.setter
    def departure_time(self, departure_time: datetime):
        """Sets the departure_time of this Booking.

        The initial departure time (over all legs)  # noqa: E501

        :param departure_time: The departure_time of this Booking.
        :type departure_time: datetime
        """

        self._departure_time = departure_time

    @property
    def arrival_time(self) -> datetime:
        """Gets the arrival_time of this Booking.

        The intended arrival time at the destination of the booking (over all legs)  # noqa: E501

        :return: The arrival_time of this Booking.
        :rtype: datetime
        """
        return self._arrival_time

    @arrival_time.setter
    def arrival_time(self, arrival_time: datetime):
        """Sets the arrival_time of this Booking.

        The intended arrival time at the destination of the booking (over all legs)  # noqa: E501

        :param arrival_time: The arrival_time of this Booking.
        :type arrival_time: datetime
        """

        self._arrival_time = arrival_time

    @property
    def main_asset_type(self) -> AssetType:
        """Gets the main_asset_type of this Booking.


        :return: The main_asset_type of this Booking.
        :rtype: AssetType
        """
        return self._main_asset_type

    @main_asset_type.setter
    def main_asset_type(self, main_asset_type: AssetType):
        """Sets the main_asset_type of this Booking.


        :param main_asset_type: The main_asset_type of this Booking.
        :type main_asset_type: AssetType
        """

        self._main_asset_type = main_asset_type

    @property
    def extra_data(self) -> BookingExtraData:
        """Gets the extra_data of this Booking.


        :return: The extra_data of this Booking.
        :rtype: BookingExtraData
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data: BookingExtraData):
        """Sets the extra_data of this Booking.


        :param extra_data: The extra_data of this Booking.
        :type extra_data: BookingExtraData
        """

        self._extra_data = extra_data
