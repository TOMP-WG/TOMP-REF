# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.all_ofsystem_region_service_area import AllOfsystemRegionServiceArea  # noqa: F401,E501
from swagger_server import util


class SystemRegion(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, region_id: str=None, name: str=None, type: str='OPERATING', service_area: AllOfsystemRegionServiceArea=None):  # noqa: E501
        """SystemRegion - a model defined in Swagger

        :param region_id: The region_id of this SystemRegion.  # noqa: E501
        :type region_id: str
        :param name: The name of this SystemRegion.  # noqa: E501
        :type name: str
        :param type: The type of this SystemRegion.  # noqa: E501
        :type type: str
        :param service_area: The service_area of this SystemRegion.  # noqa: E501
        :type service_area: AllOfsystemRegionServiceArea
        """
        self.swagger_types = {
            'region_id': str,
            'name': str,
            'type': str,
            'service_area': AllOfsystemRegionServiceArea
        }

        self.attribute_map = {
            'region_id': 'regionId',
            'name': 'name',
            'type': 'type',
            'service_area': 'serviceArea'
        }
        self._region_id = region_id
        self._name = name
        self._type = type
        self._service_area = service_area

    @classmethod
    def from_dict(cls, dikt) -> 'SystemRegion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The systemRegion of this SystemRegion.  # noqa: E501
        :rtype: SystemRegion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def region_id(self) -> str:
        """Gets the region_id of this SystemRegion.

        Unique identifier for this region  # noqa: E501

        :return: The region_id of this SystemRegion.
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id: str):
        """Sets the region_id of this SystemRegion.

        Unique identifier for this region  # noqa: E501

        :param region_id: The region_id of this SystemRegion.
        :type region_id: str
        """
        if region_id is None:
            raise ValueError("Invalid value for `region_id`, must not be `None`")  # noqa: E501

        self._region_id = region_id

    @property
    def name(self) -> str:
        """Gets the name of this SystemRegion.

        Public name for this region, could match Content-Language  # noqa: E501

        :return: The name of this SystemRegion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SystemRegion.

        Public name for this region, could match Content-Language  # noqa: E501

        :param name: The name of this SystemRegion.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self) -> str:
        """Gets the type of this SystemRegion.

        the type of area. Default this is 'OPERATING', but other area's can be published here as well (since 1.3.0). Before 1.3.0, it was only allowed to communicate OPERATING area's.  # noqa: E501

        :return: The type of this SystemRegion.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this SystemRegion.

        the type of area. Default this is 'OPERATING', but other area's can be published here as well (since 1.3.0). Before 1.3.0, it was only allowed to communicate OPERATING area's.  # noqa: E501

        :param type: The type of this SystemRegion.
        :type type: str
        """
        allowed_values = ["OPERATING", "PROHIBITED_TO_ACCESS", "PROHIBITED_TO_PAUSE", "PARKING", "DISCOUNT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def service_area(self) -> AllOfsystemRegionServiceArea:
        """Gets the service_area of this SystemRegion.

        The area served by the region (i.e. where one may travel using the service's assets) as GeoJSON Polygon coordinates  # noqa: E501

        :return: The service_area of this SystemRegion.
        :rtype: AllOfsystemRegionServiceArea
        """
        return self._service_area

    @service_area.setter
    def service_area(self, service_area: AllOfsystemRegionServiceArea):
        """Sets the service_area of this SystemRegion.

        The area served by the region (i.e. where one may travel using the service's assets) as GeoJSON Polygon coordinates  # noqa: E501

        :param service_area: The service_area of this SystemRegion.
        :type service_area: AllOfsystemRegionServiceArea
        """

        self._service_area = service_area
