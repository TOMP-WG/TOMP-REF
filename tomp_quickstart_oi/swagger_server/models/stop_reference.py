# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.country import Country  # noqa: F401,E501
from swagger_server import util


class StopReference(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, id: str=None, country: Country=None):  # noqa: E501
        """StopReference - a model defined in Swagger

        :param type: The type of this StopReference.  # noqa: E501
        :type type: str
        :param id: The id of this StopReference.  # noqa: E501
        :type id: str
        :param country: The country of this StopReference.  # noqa: E501
        :type country: Country
        """
        self.swagger_types = {
            'type': str,
            'id': str,
            'country': Country
        }

        self.attribute_map = {
            'type': 'type',
            'id': 'id',
            'country': 'country'
        }
        self._type = type
        self._id = id
        self._country = country

    @classmethod
    def from_dict(cls, dikt) -> 'StopReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The stopReference of this StopReference.  # noqa: E501
        :rtype: StopReference
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this StopReference.

        type of external reference (GTFS, CHB).  # noqa: E501

        :return: The type of this StopReference.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this StopReference.

        type of external reference (GTFS, CHB).  # noqa: E501

        :param type: The type of this StopReference.
        :type type: str
        """
        allowed_values = ["GTFS_STOP_ID", "GTFS_STOP_CODE", "GTFS_AREA_ID", "CHB_STOP_PLACE_CODE", "CHB_QUAY_CODE", "NS_CODE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self) -> str:
        """Gets the id of this StopReference.

        this field should contain the complete ID. E.g. NL:S:13121110 or BE:S:79640040  # noqa: E501

        :return: The id of this StopReference.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this StopReference.

        this field should contain the complete ID. E.g. NL:S:13121110 or BE:S:79640040  # noqa: E501

        :param id: The id of this StopReference.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def country(self) -> Country:
        """Gets the country of this StopReference.


        :return: The country of this StopReference.
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country: Country):
        """Sets the country of this StopReference.


        :param country: The country of this StopReference.
        :type country: Country
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country
