# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TokenEKeyLock(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, bd_address: str=None, device_name: str=None):  # noqa: E501
        """TokenEKeyLock - a model defined in Swagger

        :param bd_address: The bd_address of this TokenEKeyLock.  # noqa: E501
        :type bd_address: str
        :param device_name: The device_name of this TokenEKeyLock.  # noqa: E501
        :type device_name: str
        """
        self.swagger_types = {
            'bd_address': str,
            'device_name': str
        }

        self.attribute_map = {
            'bd_address': 'bdAddress',
            'device_name': 'deviceName'
        }
        self._bd_address = bd_address
        self._device_name = device_name

    @classmethod
    def from_dict(cls, dikt) -> 'TokenEKeyLock':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tokenEKey_lock of this TokenEKeyLock.  # noqa: E501
        :rtype: TokenEKeyLock
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bd_address(self) -> str:
        """Gets the bd_address of this TokenEKeyLock.

        physical address  # noqa: E501

        :return: The bd_address of this TokenEKeyLock.
        :rtype: str
        """
        return self._bd_address

    @bd_address.setter
    def bd_address(self, bd_address: str):
        """Sets the bd_address of this TokenEKeyLock.

        physical address  # noqa: E501

        :param bd_address: The bd_address of this TokenEKeyLock.
        :type bd_address: str
        """

        self._bd_address = bd_address

    @property
    def device_name(self) -> str:
        """Gets the device_name of this TokenEKeyLock.

        how it advertises itself  # noqa: E501

        :return: The device_name of this TokenEKeyLock.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name: str):
        """Sets the device_name of this TokenEKeyLock.

        how it advertises itself  # noqa: E501

        :param device_name: The device_name of this TokenEKeyLock.
        :type device_name: str
        """

        self._device_name = device_name
