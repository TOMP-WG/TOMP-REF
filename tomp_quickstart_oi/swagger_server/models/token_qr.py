# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.token_data import TokenData  # noqa: F401,E501
from swagger_server import util


class TokenQR(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, token_type: str=None, base64: str=None, version: str=None):  # noqa: E501
        """TokenQR - a model defined in Swagger

        :param token_type: The token_type of this TokenQR.  # noqa: E501
        :type token_type: str
        :param base64: The base64 of this TokenQR.  # noqa: E501
        :type base64: str
        :param version: The version of this TokenQR.  # noqa: E501
        :type version: str
        """
        self.swagger_types = {
            'token_type': str,
            'base64': str,
            'version': str
        }

        self.attribute_map = {
            'token_type': 'tokenType',
            'base64': 'base64',
            'version': 'version'
        }
        self._token_type = token_type
        self._base64 = base64
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'TokenQR':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tokenQR of this TokenQR.  # noqa: E501
        :rtype: TokenQR
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token_type(self) -> str:
        """Gets the token_type of this TokenQR.


        :return: The token_type of this TokenQR.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type: str):
        """Sets the token_type of this TokenQR.


        :param token_type: The token_type of this TokenQR.
        :type token_type: str
        """
        if token_type is None:
            raise ValueError("Invalid value for `token_type`, must not be `None`")  # noqa: E501

        self._token_type = token_type

    @property
    def base64(self) -> str:
        """Gets the base64 of this TokenQR.

        base 64 QR code  # noqa: E501

        :return: The base64 of this TokenQR.
        :rtype: str
        """
        return self._base64

    @base64.setter
    def base64(self, base64: str):
        """Sets the base64 of this TokenQR.

        base 64 QR code  # noqa: E501

        :param base64: The base64 of this TokenQR.
        :type base64: str
        """
        if base64 is None:
            raise ValueError("Invalid value for `base64`, must not be `None`")  # noqa: E501

        self._base64 = base64

    @property
    def version(self) -> str:
        """Gets the version of this TokenQR.


        :return: The version of this TokenQR.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this TokenQR.


        :param version: The version of this TokenQR.
        :type version: str
        """

        self._version = version
