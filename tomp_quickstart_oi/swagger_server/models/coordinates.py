# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Coordinates(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, lng: float=None, lat: float=None, alt: float=None):  # noqa: E501
        """Coordinates - a model defined in Swagger

        :param lng: The lng of this Coordinates.  # noqa: E501
        :type lng: float
        :param lat: The lat of this Coordinates.  # noqa: E501
        :type lat: float
        :param alt: The alt of this Coordinates.  # noqa: E501
        :type alt: float
        """
        self.swagger_types = {
            'lng': float,
            'lat': float,
            'alt': float
        }

        self.attribute_map = {
            'lng': 'lng',
            'lat': 'lat',
            'alt': 'alt'
        }
        self._lng = lng
        self._lat = lat
        self._alt = alt

    @classmethod
    def from_dict(cls, dikt) -> 'Coordinates':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The coordinates of this Coordinates.  # noqa: E501
        :rtype: Coordinates
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lng(self) -> float:
        """Gets the lng of this Coordinates.


        :return: The lng of this Coordinates.
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng: float):
        """Sets the lng of this Coordinates.


        :param lng: The lng of this Coordinates.
        :type lng: float
        """
        if lng is None:
            raise ValueError("Invalid value for `lng`, must not be `None`")  # noqa: E501

        self._lng = lng

    @property
    def lat(self) -> float:
        """Gets the lat of this Coordinates.


        :return: The lat of this Coordinates.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat: float):
        """Sets the lat of this Coordinates.


        :param lat: The lat of this Coordinates.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")  # noqa: E501

        self._lat = lat

    @property
    def alt(self) -> float:
        """Gets the alt of this Coordinates.

        altitude, in meters above sea level  # noqa: E501

        :return: The alt of this Coordinates.
        :rtype: float
        """
        return self._alt

    @alt.setter
    def alt(self, alt: float):
        """Sets the alt of this Coordinates.

        altitude, in meters above sea level  # noqa: E501

        :param alt: The alt of this Coordinates.
        :type alt: float
        """

        self._alt = alt
