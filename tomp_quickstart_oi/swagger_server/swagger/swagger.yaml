openapi: 3.0.0
info:
  title: Transport Operator MaaS Provider API
  description: "An API between MaaS providers and transport operators for booking\
    \ trips and corresponding assets. <p>The documentation (examples, process flows\
    \ and sequence diagrams) can be found at <a href=\"https://github.com/TOMP-WG/TOMP-API/\"\
    >github</a>."
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.3.0
servers:
- url: /
tags:
- name: operator information
  description: "gives information about systems, stations, operating hours [from GBFS]"
paths:
  /operator/ping:
    get:
      tags:
      - operator information
      - TO
      - MP
      summary: Describes the status of the Transport Operator - whether the APIs are
        running or not
      description: This is a healthcheck endpoint to see if the TO is up and running
        perfectly.
      operationId: operator_ping_get
      parameters:
      - name: Accept_Language
        in: header
        description: "A list of the languages/localizations the user would like to\
          \ see the results in. For user privacy and ease of use on the TO side, this\
          \ list should be kept as short as possible, ideally just one language tag\
          \ from the list in operator/information"
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: A comma-separated list of BCP 47 (RFC 5646) language tags and optional
            weights as described in IETF RFC7231 section 5.3.5
        example: "nl, de;q=0.7"
      responses:
        "200":
          description: successful operation
        "401":
          description: "Although the HTTP standard specifies \"unauthorized\", semantically\
            \ this response means \"unauthenticated\". That is, the client must authenticate\
            \ itself to get the requested response."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: not every endpoint functions properly
      x-openapi-router-controller: swagger_server.controllers.operator_information_controller
  /operator/meta:
    get:
      tags:
      - operator information
      - TO
      - MP
      summary: describes the running implementations
      description: "all versions that are implemented on this url, are described in\
        \ the result of this endpoint. In contains all versions and per version the\
        \ endpoints, their status and the supported scenarios."
      operationId: operator_meta_get
      parameters:
      - name: Accept_Language
        in: header
        description: "A list of the languages/localizations the user would like to\
          \ see the results in. For user privacy and ease of use on the TO side, this\
          \ list should be kept as short as possible, ideally just one language tag\
          \ from the list in operator/information"
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: A comma-separated list of BCP 47 (RFC 5646) language tags and optional
            weights as described in IETF RFC7231 section 5.3.5
        example: "nl, de;q=0.7"
      - name: maas_id
        in: header
        description: The ID of the sending maas operator
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1324A-DFB3482-32ACD
      - name: addressed_to
        in: header
        description: The ID of the maas operator that has to receive this message
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: 1324A-DFB3482-32ACD
      responses:
        "200":
          description: successful operation
          headers:
            Content-Language:
              description: The language/localization of user-facing content
              required: true
              style: simple
              explode: false
              schema:
                type: string
                format: One IETF BCP 47 (RFC 5646) language tag
              example: nl
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/endpointImplementation'
                x-content-type: application/json
      x-openapi-router-controller: swagger_server.controllers.operator_information_controller
  /operator/stations:
    get:
      tags:
      - operator information
      - TO
      summary: describes all available stations
      description: "All stations contained in this list are considered public (ie,\
        \ can be shown on a map for public use). If there are private stations (such\
        \ as Capital Bikeshare's White House station) these should not be exposed\
        \ here and their status should not be included [from GBFS]. This endpoint\
        \ can be filtered using the regionId OR with the combination lon, lat and\
        \ range."
      operationId: operator_stations_get
      parameters:
      - name: Accept_Language
        in: header
        description: "A list of the languages/localizations the user would like to\
          \ see the results in. For user privacy and ease of use on the TO side, this\
          \ list should be kept as short as possible, ideally just one language tag\
          \ from the list in operator/information"
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: A comma-separated list of BCP 47 (RFC 5646) language tags and optional
            weights as described in IETF RFC7231 section 5.3.5
        example: "nl, de;q=0.7"
      - name: Api
        in: header
        description: "API description, can be TOMP or maybe other (specific/derived)\
          \ API definitions"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: TOMP
      - name: Api_Version
        in: header
        description: Version of the API.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 0.6.0
      - name: maas_id
        in: header
        description: The ID of the sending maas operator
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1324A-DFB3482-32ACD
      - name: addressed_to
        in: header
        description: The ID of the maas operator that has to receive this message
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: 1324A-DFB3482-32ACD
      - name: offset
        in: query
        description: start of the selection
        required: false
        style: form
        explode: true
        schema:
          type: number
          default: 0
      - name: limit
        in: query
        description: count of the selection
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: regionId
        in: query
        description: optional id of the region to use in the filter (/operator/regions)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: lon
        in: query
        description: the longitude of the search location (WGS84)
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: lat
        in: query
        description: the latitude of the search location (WGS84)
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: radius
        in: query
        description: the range in meters from the search location to look for stations
        required: false
        style: form
        explode: true
        schema:
          type: number
      responses:
        "200":
          description: successful operation
          headers:
            Content-Language:
              description: The language/localization of user-facing content
              required: true
              style: simple
              explode: false
              schema:
                type: string
                format: One IETF BCP 47 (RFC 5646) language tag
              example: nl
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/stationInformation'
                x-content-type: application/json
        "400":
          description: Bad request. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP
            for further explanation of error code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: "Although the HTTP standard specifies \"unauthorized\", semantically\
            \ this response means \"unauthenticated\". That is, the client must authenticate\
            \ itself to get the requested response."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-openapi-router-controller: swagger_server.controllers.operator_information_controller
  /operator/available-assets:
    get:
      tags:
      - operator information
      - TO
      description: Returns a list of available assets.
      operationId: operator_available_assets_get
      parameters:
      - name: Accept_Language
        in: header
        description: "A list of the languages/localizations the user would like to\
          \ see the results in. For user privacy and ease of use on the TO side, this\
          \ list should be kept as short as possible, ideally just one language tag\
          \ from the list in operator/information"
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: A comma-separated list of BCP 47 (RFC 5646) language tags and optional
            weights as described in IETF RFC7231 section 5.3.5
        example: "nl, de;q=0.7"
      - name: Api
        in: header
        description: "API description, can be TOMP or maybe other (specific/derived)\
          \ API definitions"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: TOMP
      - name: Api_Version
        in: header
        description: Version of the API.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 0.6.0
      - name: maas_id
        in: header
        description: The ID of the sending maas operator
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1324A-DFB3482-32ACD
      - name: addressed_to
        in: header
        description: The ID of the maas operator that has to receive this message
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: 1324A-DFB3482-32ACD
      - name: offset
        in: query
        description: start of the selection
        required: false
        style: form
        explode: true
        schema:
          type: number
          default: 0
      - name: limit
        in: query
        description: count of the selection
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: regionId
        in: query
        description: optional id of the region to use in the filter (/operator/regions)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: stationId
        in: query
        description: optional id of the station to use in the filter (/operator/stations)
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: "Available assets or asset-types. In case assets are replied,\
            \ the realtime location is also available."
          headers:
            Content-Language:
              description: The language/localization of user-facing content
              required: true
              style: simple
              explode: false
              schema:
                type: string
                format: One IETF BCP 47 (RFC 5646) language tag
              example: nl
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/assetType'
                x-content-type: application/json
        "400":
          description: Bad request. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP
            for further explanation of error code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: "Although the HTTP standard specifies \"unauthorized\", semantically\
            \ this response means \"unauthenticated\". That is, the client must authenticate\
            \ itself to get the requested response."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: "The client does not have access rights to the content, i.e.\
            \ they are unauthorized, so server is rejecting to give proper response.\
            \ Unlike 401, the client's identity is known to the server."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: The requested resources does not exist or the requester is
            not authorized to see it or know it exists.
      x-openapi-router-controller: swagger_server.controllers.operator_information_controller
  /operator/alerts:
    get:
      tags:
      - operator information
      - TO
      summary: informs customers about changes to the system outside of normal operations
      description: "This feed is intended to inform customers about changes to the\
        \ system that do not fall within the normal system operations. For example,\
        \ system closures due to weather would be listed here, but a system that only\
        \ operated for part of the year would have that schedule listed in the system-calendar.json\
        \ feed. This file is an array of alert objects defined as below. Obsolete\
        \ alerts should be removed so the client application can safely present to\
        \ the end user everything present in the feed. The consumer could use the\
        \ start/end information to determine if this is a past, ongoing or future\
        \ alert and adjust the presentation accordingly. [from GBFS]"
      operationId: operator_alerts_get
      parameters:
      - name: Accept_Language
        in: header
        description: "A list of the languages/localizations the user would like to\
          \ see the results in. For user privacy and ease of use on the TO side, this\
          \ list should be kept as short as possible, ideally just one language tag\
          \ from the list in operator/information"
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: A comma-separated list of BCP 47 (RFC 5646) language tags and optional
            weights as described in IETF RFC7231 section 5.3.5
        example: "nl, de;q=0.7"
      - name: Api
        in: header
        description: "API description, can be TOMP or maybe other (specific/derived)\
          \ API definitions"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: TOMP
      - name: Api_Version
        in: header
        description: Version of the API.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 0.6.0
      - name: maas_id
        in: header
        description: The ID of the sending maas operator
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1324A-DFB3482-32ACD
      - name: addressed_to
        in: header
        description: The ID of the maas operator that has to receive this message
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: 1324A-DFB3482-32ACD
      - name: offset
        in: query
        description: start of the selection
        required: false
        style: form
        explode: true
        schema:
          type: number
          default: 0
      - name: limit
        in: query
        description: count of the selection
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: regionId
        in: query
        description: optional id of the region to use in the filter (/operator/regions)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: stationId
        in: query
        description: optional id of the station to use in the filter (/operator/stations)
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: returns currently active system alerts
          headers:
            Content-Language:
              description: The language/localization of user-facing content
              required: true
              style: simple
              explode: false
              schema:
                type: string
                format: One IETF BCP 47 (RFC 5646) language tag
              example: nl
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/systemAlert'
                x-content-type: application/json
        "400":
          description: Bad request. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP
            for further explanation of error code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: "Although the HTTP standard specifies \"unauthorized\", semantically\
            \ this response means \"unauthenticated\". That is, the client must authenticate\
            \ itself to get the requested response."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-openapi-router-controller: swagger_server.controllers.operator_information_controller
  /operator/operating-calendar:
    get:
      tags:
      - operator information
      - TO
      summary: "describes the operating calendar for a system. An array of year objects\
        \ defined as follows (if start/end year are omitted, then assume the start\
        \ and end months do not change from year to year). [from GFBS]"
      operationId: operator_operating_calendar_get
      parameters:
      - name: Accept_Language
        in: header
        description: "A list of the languages/localizations the user would like to\
          \ see the results in. For user privacy and ease of use on the TO side, this\
          \ list should be kept as short as possible, ideally just one language tag\
          \ from the list in operator/information"
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: A comma-separated list of BCP 47 (RFC 5646) language tags and optional
            weights as described in IETF RFC7231 section 5.3.5
        example: "nl, de;q=0.7"
      - name: Api
        in: header
        description: "API description, can be TOMP or maybe other (specific/derived)\
          \ API definitions"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: TOMP
      - name: Api_Version
        in: header
        description: Version of the API.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 0.6.0
      - name: maas_id
        in: header
        description: The ID of the sending maas operator
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1324A-DFB3482-32ACD
      - name: addressed_to
        in: header
        description: The ID of the maas operator that has to receive this message
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: 1324A-DFB3482-32ACD
      - name: regionId
        in: query
        description: optional id of the region to use in the filter (/operator/regions)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: stationId
        in: query
        description: optional id of the station to use in the filter (/operator/stations)
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            Content-Language:
              description: The language/localization of user-facing content
              required: true
              style: simple
              explode: false
              schema:
                type: string
                format: One IETF BCP 47 (RFC 5646) language tag
              example: nl
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/systemCalendar'
                x-content-type: application/json
        "400":
          description: Bad request. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP
            for further explanation of error code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: "Although the HTTP standard specifies \"unauthorized\", semantically\
            \ this response means \"unauthenticated\". That is, the client must authenticate\
            \ itself to get the requested response."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-openapi-router-controller: swagger_server.controllers.operator_information_controller
  /operator/operating-hours:
    get:
      tags:
      - operator information
      - TO
      summary: describes the system hours of operation
      description: "Describes the hours of operation of all available systems of the\
        \ transport operator [from GBFS]"
      operationId: operator_operating_hours_get
      parameters:
      - name: Accept_Language
        in: header
        description: "A list of the languages/localizations the user would like to\
          \ see the results in. For user privacy and ease of use on the TO side, this\
          \ list should be kept as short as possible, ideally just one language tag\
          \ from the list in operator/information"
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: A comma-separated list of BCP 47 (RFC 5646) language tags and optional
            weights as described in IETF RFC7231 section 5.3.5
        example: "nl, de;q=0.7"
      - name: Api
        in: header
        description: "API description, can be TOMP or maybe other (specific/derived)\
          \ API definitions"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: TOMP
      - name: Api_Version
        in: header
        description: Version of the API.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 0.6.0
      - name: maas_id
        in: header
        description: The ID of the sending maas operator
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1324A-DFB3482-32ACD
      - name: addressed_to
        in: header
        description: The ID of the maas operator that has to receive this message
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: 1324A-DFB3482-32ACD
      - name: regionId
        in: query
        description: optional id of the region to use in the filter (/operator/regions)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: stationId
        in: query
        description: optional id of the station to use in the filter (/operator/stations)
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            Content-Language:
              description: The language/localization of user-facing content
              required: true
              style: simple
              explode: false
              schema:
                type: string
                format: One IETF BCP 47 (RFC 5646) language tag
              example: nl
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/systemHours'
                x-content-type: application/json
        "400":
          description: Bad request. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP
            for further explanation of error code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: "Although the HTTP standard specifies \"unauthorized\", semantically\
            \ this response means \"unauthenticated\". That is, the client must authenticate\
            \ itself to get the requested response."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-openapi-router-controller: swagger_server.controllers.operator_information_controller
  /operator/information:
    get:
      tags:
      - operator information
      - TO
      summary: describes the system
      description: "Describes the system including System operator, System location,\
        \ year implemented, URLs, contact info, time zone. [from GBFS]"
      operationId: operator_information_get
      parameters:
      - name: Accept_Language
        in: header
        description: "A list of the languages/localizations the user would like to\
          \ see the results in. For user privacy and ease of use on the TO side, this\
          \ list should be kept as short as possible, ideally just one language tag\
          \ from the list in operator/information"
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: A comma-separated list of BCP 47 (RFC 5646) language tags and optional
            weights as described in IETF RFC7231 section 5.3.5
        example: "nl, de;q=0.7"
      - name: Api
        in: header
        description: "API description, can be TOMP or maybe other (specific/derived)\
          \ API definitions"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: TOMP
      - name: Api_Version
        in: header
        description: Version of the API.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 0.6.0
      - name: maas_id
        in: header
        description: The ID of the sending maas operator
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1324A-DFB3482-32ACD
      - name: addressed_to
        in: header
        description: The ID of the maas operator that has to receive this message
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: 1324A-DFB3482-32ACD
      responses:
        "200":
          description: successful operation
          headers:
            Content-Language:
              description: The language/localization of user-facing content
              required: true
              style: simple
              explode: false
              schema:
                type: string
                format: One IETF BCP 47 (RFC 5646) language tag
              example: nl
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemInformation'
        "400":
          description: Bad request. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP
            for further explanation of error code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: "Although the HTTP standard specifies \"unauthorized\", semantically\
            \ this response means \"unauthenticated\". That is, the client must authenticate\
            \ itself to get the requested response."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-openapi-router-controller: swagger_server.controllers.operator_information_controller
  /operator/pricing-plans:
    get:
      tags:
      - operator information
      - TO
      summary: gives pricing information
      description: "Describes pricing of systems or assets [from GBFS]"
      operationId: operator_pricing_plans_get
      parameters:
      - name: Accept_Language
        in: header
        description: "A list of the languages/localizations the user would like to\
          \ see the results in. For user privacy and ease of use on the TO side, this\
          \ list should be kept as short as possible, ideally just one language tag\
          \ from the list in operator/information"
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: A comma-separated list of BCP 47 (RFC 5646) language tags and optional
            weights as described in IETF RFC7231 section 5.3.5
        example: "nl, de;q=0.7"
      - name: Api
        in: header
        description: "API description, can be TOMP or maybe other (specific/derived)\
          \ API definitions"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: TOMP
      - name: Api_Version
        in: header
        description: Version of the API.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 0.6.0
      - name: maas_id
        in: header
        description: The ID of the sending maas operator
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1324A-DFB3482-32ACD
      - name: addressed_to
        in: header
        description: The ID of the maas operator that has to receive this message
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: 1324A-DFB3482-32ACD
      - name: regionId
        in: query
        description: optional id of the region to use in the filter (/operator/regions)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: stationId
        in: query
        description: optional id of the station to use in the filter (/operator/stations)
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: returns standard pricing plans for an operator
          headers:
            Content-Language:
              description: The language/localization of user-facing content
              required: true
              style: simple
              explode: false
              schema:
                type: string
                format: One IETF BCP 47 (RFC 5646) language tag
              example: nl
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/systemPricingPlan'
                x-content-type: application/json
        "400":
          description: Bad request. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP
            for further explanation of error code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: "Although the HTTP standard specifies \"unauthorized\", semantically\
            \ this response means \"unauthenticated\". That is, the client must authenticate\
            \ itself to get the requested response."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: "The client does not have access rights to the content, i.e.\
            \ they are unauthorized, so server is rejecting to give proper response.\
            \ Unlike 401, the client's identity is known to the server."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-openapi-router-controller: swagger_server.controllers.operator_information_controller
  /operator/regions:
    get:
      tags:
      - operator information
      - TO
      summary: "describes regions for a system that is broken up by geographic or\
        \ political region. It is defined as a separate feed to allow for additional\
        \ region metadata (such as shape definitions). [from GBFS]"
      operationId: operator_regions_get
      parameters:
      - name: Accept_Language
        in: header
        description: "A list of the languages/localizations the user would like to\
          \ see the results in. For user privacy and ease of use on the TO side, this\
          \ list should be kept as short as possible, ideally just one language tag\
          \ from the list in operator/information"
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: A comma-separated list of BCP 47 (RFC 5646) language tags and optional
            weights as described in IETF RFC7231 section 5.3.5
        example: "nl, de;q=0.7"
      - name: Api
        in: header
        description: "API description, can be TOMP or maybe other (specific/derived)\
          \ API definitions"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: TOMP
      - name: Api_Version
        in: header
        description: Version of the API.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 0.6.0
      - name: maas_id
        in: header
        description: The ID of the sending maas operator
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1324A-DFB3482-32ACD
      - name: addressed_to
        in: header
        description: The ID of the maas operator that has to receive this message
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: 1324A-DFB3482-32ACD
      - name: offset
        in: query
        description: start of the selection
        required: false
        style: form
        explode: true
        schema:
          type: number
          default: 0
      - name: limit
        in: query
        description: count of the selection
        required: false
        style: form
        explode: true
        schema:
          type: number
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/systemRegion'
                x-content-type: application/json
        "400":
          description: Bad request. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP
            for further explanation of error code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: "Although the HTTP standard specifies \"unauthorized\", semantically\
            \ this response means \"unauthenticated\". That is, the client must authenticate\
            \ itself to get the requested response."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-openapi-router-controller: swagger_server.controllers.operator_information_controller
components:
  schemas:
    address:
      required:
      - areaReference
      - streetAddress
      type: object
      properties:
        streetAddress:
          type: string
          example: "example street 18, 2nd floor, 18-B33"
        street:
          type: string
          description: "street, consistent with streetAddress"
        houseNumber:
          minimum: 0
          type: number
          description: "house number, consistent with streetAddress"
        houseNumberAddition:
          type: string
          description: "the additional part of the house number (f.x. 13bis, where\
            \ 'bis' is the additional part), consistent with streetAddress"
        addressAdditionalInfo:
          type: string
          description: additional information to find the address (f.x. just around
            the corner)
        areaReference:
          type: string
          description: "city or town, principal subdivision such as province, state\
            \ or county, could match Content-Language"
          example: "Smallcity, Pinetree county"
        city:
          type: string
          description: "specified city or town, consistent with areaReference"
        province:
          type: string
          description: "province or region, consistent with areaReference"
        state:
          type: string
          description: "state, consistent with areaReference"
        postalCode:
          type: string
        country:
          $ref: '#/components/schemas/country'
      description: "street address, including number OR PO box number, eventually\
        \ extended with internal reference like room number, could match Content-Language"
      example:
        country: NL
        areaReference: "Smallcity, Pinetree county"
        province: province
        streetAddress: "example street 18, 2nd floor, 18-B33"
        city: city
        street: street
        postalCode: postalCode
        houseNumber: 0.602745618307040320615897144307382404804229736328125
        addressAdditionalInfo: addressAdditionalInfo
        state: state
        houseNumberAddition: houseNumberAddition
    amountOfMoney:
      type: object
      properties:
        amount:
          type: number
          description: This should be in the base unit as defined by the ISO 4217
            currency code with the appropriate number of decimal places and omitting
            the currency symbol. e.g. if the price is in US Dollars the price would
            be 9.95. This is inclusive VAT
          example: 9.95
        amountExVat:
          type: number
          example: 8.95
        currencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: ISO 4217 currency code
        vatRate:
          type: number
          description: value added tax rate (percentage of amount)
          example: 21
        vatCountryCode:
          $ref: '#/components/schemas/country'
    ancillaryBooking:
      required:
      - legId
      type: object
      properties:
        allOf:
          $ref: '#/components/schemas/requirement'
        legId:
          type: string
    asset:
      required:
      - id
      - overriddenProperties
      type: object
      properties:
        id:
          type: string
          description: Identifier of an asset. Whenever used in Operator Information
            changed after every trip (GDPR).
        isReserved:
          type: boolean
          description: true indicates the bike is currently reserved for someone else
        isReservedFrom:
          type: string
          description: optional addition to determine if an asset is reserved in the
            future
          format: date-time
        isReservedTo:
          type: string
          description: optional addition to determine when asset is available in the
            future
          format: date-time
        isDisabled:
          type: boolean
          description: true indicates the asset is currently disabled (broken)
        rentalUrl:
          type: string
          description: deep-linking option from GBFS+. Only added to be consistent
            with GBFS 2.0
          format: URL
          example: https://www.rentmyfreebike.com/app?sid=1234567890
          deprecated: true
        rentalUrlAndroid:
          type: string
          description: deep-linking option from GBFS 2.0. Only added to be consistent
            with GBFS 2.0
          format: URL
          example: https://www.rentmyfreebike.com/app?sid=1234567890&platform=android
          deprecated: true
        rentalUrlIOS:
          type: string
          description: deep-linking option from GBFS 2.0. Only added to be consistent
            with GBFS 2.0
          format: URL
          example: https://www.rentmyfreebike.com/app?sid=1234567890&platform=ios
          deprecated: true
        mileage:
          type: number
          description: the current mileage of the asset
        licensePlate:
          type: string
          description: "the usage of this field requires a secure environment. When\
            \ assets are published in available-assets, this field can be used to\
            \ track assets. Be aware of this."
        overriddenProperties:
          $ref: '#/components/schemas/assetProperties'
      example:
        overriddenProperties:
          pets: true
          airConditioning: true
          other: other
          fuel: NONE
          travelAbroad: true
          energyLabel: A
          winterTires: true
          undergroundParking: true
          ancillaries:
          - number: number
            variable-number: 2.027123023002321833274663731572218239307403564453125
            memo: memo
            source: source
            category: category
            type: type
            applicable-days:
            - MO
            - MO
          - number: number
            variable-number: 2.027123023002321833274663731572218239307403564453125
            memo: memo
            source: source
            category: category
            type: type
            applicable-days:
            - MO
            - MO
          smoking: true
          towingHook: true
          model: model
          gearbox: MANUAL
          cargo: cargo
          brand: brand
          gears: 5
          cabrio: true
          image: https://files.fietsersbond.nl/app/uploads/2014/10/30151126/ST2_Men_Side_CityKit-Stromer.jpg
          buildingYear: 5
          stateOfCharge: 70
          co2PerKm: 1.46581298050294517310021547018550336360931396484375
          helmetRequired: false
          propulsion: MUSCLE
          maxSpeed: 9.301444243932575517419536481611430644989013671875
          nrOfDoors: 3
          infantSeat: true
          persons: 1
          colour: colour
          easyAccessibility: LIFT
          meta: ""
          name: name
          location:
            name: name
            coordinates:
              lng: 6.169639
              alt: 0.80082819046101150206595775671303272247314453125
              lat: 52.253279
            physicalAddress:
              country: NL
              areaReference: "Smallcity, Pinetree county"
              province: province
              streetAddress: "example street 18, 2nd floor, 18-B33"
              city: city
              street: street
              postalCode: postalCode
              houseNumber: 0.602745618307040320615897144307382404804229736328125
              addressAdditionalInfo: addressAdditionalInfo
              state: state
              houseNumberAddition: houseNumberAddition
            stopReference:
            - country: NL
              id: id
              type: GTFS_STOP_ID
            - country: NL
              id: id
              type: GTFS_STOP_ID
            stationId: stationId
            extraInfo: ""
          accessMethods:
          - DEEPLINK
          - DEEPLINK
        rentalUrl: https://www.rentmyfreebike.com/app?sid=1234567890
        licensePlate: licensePlate
        isReserved: true
        isReservedFrom: 2000-01-23T04:56:07.000+00:00
        id: id
        isDisabled: true
        rentalUrlAndroid: https://www.rentmyfreebike.com/app?sid=1234567890&platform=android
        rentalUrlIOS: https://www.rentmyfreebike.com/app?sid=1234567890&platform=ios
        isReservedTo: 2000-01-23T04:56:07.000+00:00
        mileage: 6.02745618307040320615897144307382404804229736328125
    assetClass:
      type: string
      description: "These classes are taken from the NeTeX standard, but ALL and UNKNOWN\
        \ are removed. On the other hand OTHER and PARKING are added."
      enum:
      - AIR
      - BUS
      - TROLLEYBUS
      - TRAM
      - COACH
      - RAIL
      - INTERCITYRAIL
      - URBANRAIL
      - METRO
      - WATER
      - CABLEWAY
      - FUNICULAR
      - TAXI
      - SELFDRIVE
      - FOOT
      - BICYCLE
      - MOTORCYCLE
      - CAR
      - SHUTTLE
      - OTHER
      - PARKING
      - MOPED
      - STEP
    assetType:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: "Unique identifier of an asset type,"
        stationId:
          type: string
          description: "If stationId is present, the nrAvailable is expected to find\
            \ the availability at that particular station"
        nrAvailable:
          type: integer
        assets:
          type: array
          items:
            $ref: '#/components/schemas/asset'
        assetClass:
          $ref: '#/components/schemas/assetClass'
        assetSubClass:
          type: string
          description: "a more precise classification of the asset, like 'cargo bike',\
            \ 'public bus', 'coach bus', 'office bus', 'water taxi',  'segway'. This\
            \ is mandatory when using 'OTHER' as class."
        sharedProperties:
          $ref: '#/components/schemas/assetProperties'
        applicablePricings:
          type: array
          description: pricing plans that can be applicable for this assetType. Business
            logic to determine the final pricing plan is not exposed. Just call the
            plannings endpoint (v1.2) or the inquiries endpoint (v.1.3)
          items:
            $ref: '#/components/schemas/systemPricingPlan'
        conditions:
          type: array
          description: "extra information about the asset type, making it possible\
            \ to f.x. specifying that booking this car requires a driver license."
          items:
            $ref: '#/components/schemas/condition'
      example:
        assets:
        - overriddenProperties:
            pets: true
            airConditioning: true
            other: other
            fuel: NONE
            travelAbroad: true
            energyLabel: A
            winterTires: true
            undergroundParking: true
            ancillaries:
            - number: number
              variable-number: 2.027123023002321833274663731572218239307403564453125
              memo: memo
              source: source
              category: category
              type: type
              applicable-days:
              - MO
              - MO
            - number: number
              variable-number: 2.027123023002321833274663731572218239307403564453125
              memo: memo
              source: source
              category: category
              type: type
              applicable-days:
              - MO
              - MO
            smoking: true
            towingHook: true
            model: model
            gearbox: MANUAL
            cargo: cargo
            brand: brand
            gears: 5
            cabrio: true
            image: https://files.fietsersbond.nl/app/uploads/2014/10/30151126/ST2_Men_Side_CityKit-Stromer.jpg
            buildingYear: 5
            stateOfCharge: 70
            co2PerKm: 1.46581298050294517310021547018550336360931396484375
            helmetRequired: false
            propulsion: MUSCLE
            maxSpeed: 9.301444243932575517419536481611430644989013671875
            nrOfDoors: 3
            infantSeat: true
            persons: 1
            colour: colour
            easyAccessibility: LIFT
            meta: ""
            name: name
            location:
              name: name
              coordinates:
                lng: 6.169639
                alt: 0.80082819046101150206595775671303272247314453125
                lat: 52.253279
              physicalAddress:
                country: NL
                areaReference: "Smallcity, Pinetree county"
                province: province
                streetAddress: "example street 18, 2nd floor, 18-B33"
                city: city
                street: street
                postalCode: postalCode
                houseNumber: 0.602745618307040320615897144307382404804229736328125
                addressAdditionalInfo: addressAdditionalInfo
                state: state
                houseNumberAddition: houseNumberAddition
              stopReference:
              - country: NL
                id: id
                type: GTFS_STOP_ID
              - country: NL
                id: id
                type: GTFS_STOP_ID
              stationId: stationId
              extraInfo: ""
            accessMethods:
            - DEEPLINK
            - DEEPLINK
          rentalUrl: https://www.rentmyfreebike.com/app?sid=1234567890
          licensePlate: licensePlate
          isReserved: true
          isReservedFrom: 2000-01-23T04:56:07.000+00:00
          id: id
          isDisabled: true
          rentalUrlAndroid: https://www.rentmyfreebike.com/app?sid=1234567890&platform=android
          rentalUrlIOS: https://www.rentmyfreebike.com/app?sid=1234567890&platform=ios
          isReservedTo: 2000-01-23T04:56:07.000+00:00
          mileage: 6.02745618307040320615897144307382404804229736328125
        - overriddenProperties:
            pets: true
            airConditioning: true
            other: other
            fuel: NONE
            travelAbroad: true
            energyLabel: A
            winterTires: true
            undergroundParking: true
            ancillaries:
            - number: number
              variable-number: 2.027123023002321833274663731572218239307403564453125
              memo: memo
              source: source
              category: category
              type: type
              applicable-days:
              - MO
              - MO
            - number: number
              variable-number: 2.027123023002321833274663731572218239307403564453125
              memo: memo
              source: source
              category: category
              type: type
              applicable-days:
              - MO
              - MO
            smoking: true
            towingHook: true
            model: model
            gearbox: MANUAL
            cargo: cargo
            brand: brand
            gears: 5
            cabrio: true
            image: https://files.fietsersbond.nl/app/uploads/2014/10/30151126/ST2_Men_Side_CityKit-Stromer.jpg
            buildingYear: 5
            stateOfCharge: 70
            co2PerKm: 1.46581298050294517310021547018550336360931396484375
            helmetRequired: false
            propulsion: MUSCLE
            maxSpeed: 9.301444243932575517419536481611430644989013671875
            nrOfDoors: 3
            infantSeat: true
            persons: 1
            colour: colour
            easyAccessibility: LIFT
            meta: ""
            name: name
            location:
              name: name
              coordinates:
                lng: 6.169639
                alt: 0.80082819046101150206595775671303272247314453125
                lat: 52.253279
              physicalAddress:
                country: NL
                areaReference: "Smallcity, Pinetree county"
                province: province
                streetAddress: "example street 18, 2nd floor, 18-B33"
                city: city
                street: street
                postalCode: postalCode
                houseNumber: 0.602745618307040320615897144307382404804229736328125
                addressAdditionalInfo: addressAdditionalInfo
                state: state
                houseNumberAddition: houseNumberAddition
              stopReference:
              - country: NL
                id: id
                type: GTFS_STOP_ID
              - country: NL
                id: id
                type: GTFS_STOP_ID
              stationId: stationId
              extraInfo: ""
            accessMethods:
            - DEEPLINK
            - DEEPLINK
          rentalUrl: https://www.rentmyfreebike.com/app?sid=1234567890
          licensePlate: licensePlate
          isReserved: true
          isReservedFrom: 2000-01-23T04:56:07.000+00:00
          id: id
          isDisabled: true
          rentalUrlAndroid: https://www.rentmyfreebike.com/app?sid=1234567890&platform=android
          rentalUrlIOS: https://www.rentmyfreebike.com/app?sid=1234567890&platform=ios
          isReservedTo: 2000-01-23T04:56:07.000+00:00
          mileage: 6.02745618307040320615897144307382404804229736328125
        applicablePricings:
        - fare:
            estimated: true
            parts:
            - amount: 9.96
              currencyCode: EUR
              vatRate: 21
              type: FLEX
              unitType: HOUR
              units: 1
            - amount: 9.96
              currencyCode: EUR
              vatRate: 21
              type: FLEX
              unitType: HOUR
              units: 1
            description: description
            class: class
          regionId: regionId
          name: Free Plan
          isTaxable: true
          description: "Unlimited plan for free bikes, as long as you don't break\
            \ them!"
          planId: freeplan1
          url: https://www.rentmyfreebike.com/freeplan
          stationId: stationId
        - fare:
            estimated: true
            parts:
            - amount: 9.96
              currencyCode: EUR
              vatRate: 21
              type: FLEX
              unitType: HOUR
              units: 1
            - amount: 9.96
              currencyCode: EUR
              vatRate: 21
              type: FLEX
              unitType: HOUR
              units: 1
            description: description
            class: class
          regionId: regionId
          name: Free Plan
          isTaxable: true
          description: "Unlimited plan for free bikes, as long as you don't break\
            \ them!"
          planId: freeplan1
          url: https://www.rentmyfreebike.com/freeplan
          stationId: stationId
        nrAvailable: 0
        id: id
        assetClass: AIR
        assetSubClass: assetSubClass
        conditions:
        - conditionType: conditionType
          id: deposit50eu
        - conditionType: conditionType
          id: deposit50eu
        stationId: stationId
        sharedProperties: null
    assetProperties:
      properties:
        name:
          type: string
          description: "name of asset (type), required in either assetType or asset,\
            \ should match Content-Language"
        location:
          $ref: '#/components/schemas/place'
        fuel:
          type: string
          enum:
          - NONE
          - GASOLINE
          - DIESEL
          - ELECTRIC
          - HYBRID_GASOLINE
          - HYBRID_DIESEL
          - HYBRID_GAS
          - HYDROGEN
          - GAS
          - BIO_MASS
          - KEROSINE
          - OTHER
        energyLabel:
          type: string
          description: Energy efficiency
          enum:
          - A
          - B
          - C
          - D
          - E
        co2PerKm:
          type: number
        brand:
          type: string
          description: brand of the asset
        model:
          type: string
        buildingYear:
          type: integer
        travelAbroad:
          type: boolean
          description: true indicates asset is allowed to travel abroad
        airConditioning:
          type: boolean
          description: true indicates airconditioning required
        cabrio:
          type: boolean
          description: true indicates cabrio required
        colour:
          type: string
          description: "colour of the asset, should match Content-Language"
        cargo:
          type: string
          description: "describes options to carry cargo, should match Content-Language"
        easyAccessibility:
          type: string
          description: describes if asset is or needs to be easily accessible
          enum:
          - LIFT
          - ESCALATOR
          - GROUND_LEVEL
          - SIGHTIMPAIRMENT
          - HEARINGIMPAIRMENT
          - WHEELCHAIR
        gears:
          type: integer
          description: number of gears of the asset
        gearbox:
          type: string
          description: type of gearbox
          enum:
          - MANUAL
          - AUTOMATIC
          - SEMIAUTOMATIC
        image:
          type: string
          description: Link to an image of the asset
          format: URL
          example: https://files.fietsersbond.nl/app/uploads/2014/10/30151126/ST2_Men_Side_CityKit-Stromer.jpg
        infantSeat:
          type: boolean
          description: true indicates infant seat required
        persons:
          minimum: 1
          type: integer
          description: number of persons able to use the asset
        pets:
          type: boolean
          description: true indicates pets are allowed on asset
        propulsion:
          type: string
          description: way in which the asset is powered
          enum:
          - MUSCLE
          - ELECTRIC
          - GASOLINE
          - DIESEL
          - HYBRID
          - LPG
          - HYDROGEN
        smoking:
          type: boolean
          description: true indicates smoking is allowed on asset
        stateOfCharge:
          maximum: 100
          minimum: 0
          type: integer
          description: percentage of charge available
        towingHook:
          type: boolean
          description: true indicates towing hook required
        undergroundParking:
          type: boolean
          description: true indicates underground parking is allowed with asset
        winterTires:
          type: boolean
          description: true indicates winter tires required
        maxSpeed:
          type: number
          description: the maximum allowed speed for this asset (in km/h)
        helmetRequired:
          type: boolean
          description: is a helmet required to operate this asset
          default: false
        other:
          type: string
          description: "free text to describe asset, should match Content-Language"
        nrOfDoors:
          type: integer
          description: the number of doors of the vehicle. Return only when applicable
        meta:
          type: object
          additionalProperties: true
          description: "this object can contain extra information about the type of\
            \ asset. For instance values from the 'Woordenboek Reizigerskenmerken'.\
            \ [https://github.com/efel85/TOMP-API/issues/17]. These values can also\
            \ be used in the planning."
        accessMethods:
          type: array
          description: "access method for trip execution. Data will be delivered in\
            \ the response of /booking/{id}/events - COMMIT or /leg/{id}/events -\
            \ PREPARE (preferred)."
          items:
            $ref: '#/components/schemas/assetAccessMethods'
        ancillaries:
          type: array
          items:
            $ref: '#/components/schemas/requirement'
      description: Aspects of an asset or assetType. Most aspects are optional and
        should only be used when applicable.
      example:
        pets: true
        airConditioning: true
        other: other
        fuel: NONE
        travelAbroad: true
        energyLabel: A
        winterTires: true
        undergroundParking: true
        ancillaries:
        - number: number
          variable-number: 2.027123023002321833274663731572218239307403564453125
          memo: memo
          source: source
          category: category
          type: type
          applicable-days:
          - MO
          - MO
        - number: number
          variable-number: 2.027123023002321833274663731572218239307403564453125
          memo: memo
          source: source
          category: category
          type: type
          applicable-days:
          - MO
          - MO
        smoking: true
        towingHook: true
        model: model
        gearbox: MANUAL
        cargo: cargo
        brand: brand
        gears: 5
        cabrio: true
        image: https://files.fietsersbond.nl/app/uploads/2014/10/30151126/ST2_Men_Side_CityKit-Stromer.jpg
        buildingYear: 5
        stateOfCharge: 70
        co2PerKm: 1.46581298050294517310021547018550336360931396484375
        helmetRequired: false
        propulsion: MUSCLE
        maxSpeed: 9.301444243932575517419536481611430644989013671875
        nrOfDoors: 3
        infantSeat: true
        persons: 1
        colour: colour
        easyAccessibility: LIFT
        meta: ""
        name: name
        location:
          name: name
          coordinates:
            lng: 6.169639
            alt: 0.80082819046101150206595775671303272247314453125
            lat: 52.253279
          physicalAddress:
            country: NL
            areaReference: "Smallcity, Pinetree county"
            province: province
            streetAddress: "example street 18, 2nd floor, 18-B33"
            city: city
            street: street
            postalCode: postalCode
            houseNumber: 0.602745618307040320615897144307382404804229736328125
            addressAdditionalInfo: addressAdditionalInfo
            state: state
            houseNumberAddition: houseNumberAddition
          stopReference:
          - country: NL
            id: id
            type: GTFS_STOP_ID
          - country: NL
            id: id
            type: GTFS_STOP_ID
          stationId: stationId
          extraInfo: ""
        accessMethods:
        - DEEPLINK
        - DEEPLINK
    assetAccessMethods:
      type: string
      enum:
      - DEEPLINK
      - QR
      - AZTEC
      - TOMP-API
      - AXA-EKEY-OTP
      - PHYSICAL-KEY
      - BARCODE
      - PDF
      - HTML
      - OVC
      - EMV
      - NONE
    bankAccount:
      type: object
      properties:
        name:
          type: string
          description: account name
        number:
          type: string
          description: account number
        country:
          $ref: '#/components/schemas/country'
        bankIdentification:
          type: string
          description: "bank identification, like BIC code"
    booking:
      type: object
      description: The booking information describing the state and details of an
        agreed upon trip
      allOf:
      - $ref: '#/components/schemas/bookingRequest'
      - type: object
        properties:
          state:
            $ref: '#/components/schemas/bookingState'
          legs:
            type: array
            description: "The legs of this booking, generally just one for simple\
              \ legs, in order of how they will be travelled. If this part is not\
              \ present, it means that there is only one leg. This leg can be constructed\
              \ * leg[0].id = booking.id * leg[0].departureTime = booking.departureTime\
              \ * leg[0].arrivalTime = booking.arrivalTime * leg[0].assetType = booking.mainAssetType\
              \ * leg[0].pricing = booking.pricing This approach is not allowed in\
              \ the trip execution part"
            items:
              $ref: '#/components/schemas/leg'
          pricing:
            description: "The pricing information of the overall booking, in addition\
              \ to any leg pricing, if not all legs have pricing the booking should\
              \ have the fare"
            allOf:
            - $ref: '#/components/schemas/fare'
          departureTime:
            type: string
            description: The initial departure time (over all legs)
            format: date-time
          arrivalTime:
            type: string
            description: The intended arrival time at the destination of the booking
              (over all legs)
            format: date-time
          mainAssetType:
            $ref: '#/components/schemas/assetType'
          extraData:
            $ref: '#/components/schemas/booking_extraData'
    bookingOperation:
      required:
      - operation
      type: object
      properties:
        operation:
          type: string
          enum:
          - CANCEL
          - EXPIRE
          - DENY
          - COMMIT
        origin:
          type: string
          description: "This operation can be done on behalf of another party. The\
            \ MP can act on behalf of the END_USER (cancel this booking for me); to\
            \ override the default origin. In case this field is missing, it must\
            \ be assumed that the events the MP is sending, this field should contain\
            \ \"MP\". And in case the TO is sending, \"TO\"."
          enum:
          - TO
          - MP
          - END_USER
          - OTHER
      description: operation on the bookingOption
    bookingRequest:
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for the TO to know this booking by
        from:
          description: "information about the origin, only to supply when requested\
            \ in the conditionRequireBookingData"
          allOf:
          - $ref: '#/components/schemas/place'
        callbackUrl:
          type: string
          description: "The callback URL of the Maas Provider, to use as base url\
            \ for callback, f.x. the POST legs/{id}/events and POST /bookings/{id}/events.\
            \ Only to be provided when this deviates from standard or agreed URL."
          format: URL
        to:
          description: "information about the destination, only to supply when requested\
            \ in the conditionRequireBookingData"
          allOf:
          - $ref: '#/components/schemas/place'
        customer:
          description: "The user that wants to make this booking, only to supply when\
            \ requested in the conditionRequireBookingData"
          allOf:
          - $ref: '#/components/schemas/customer'
      description: A booking requested by the MP
    bookingState:
      type: string
      description: The life-cycle state of the booking (from NEW to FINISHED)
      example: CONFIRMED
      enum:
      - NEW
      - PENDING
      - REJECTED
      - RELEASED
      - EXPIRED
      - CONDITIONAL_CONFIRMED
      - CONFIRMED
      - CANCELLED
      - STARTED
      - FINISHED
    card:
      description: "Any kind of card that isn't a license, only provide the cards\
        \ that are required"
      allOf:
      - $ref: '#/components/schemas/cardType'
      - required:
        - cardNumber
        - validUntil
        type: object
        properties:
          cardDescription:
            type: string
            description: description of the card
          cardNumber:
            type: string
            description: "number of the card, like ID number, credit card or bank\
              \ account number"
          cardAdditionalNumber:
            type: string
            description: "additional number, like CVC code or IBAN code"
          validUntil:
            type: string
            format: date
          country:
            $ref: '#/components/schemas/country'
    cardType:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: The broad category of card
          enum:
          - ID
          - DISCOUNT
          - TRAVEL
          - BANK
          - CREDIT
          - PASSPORT
          - OTHER
        subType:
          type: string
          description: For use in case of OTHER. Can be used in bilateral agreements.
        assetClass:
          $ref: '#/components/schemas/assetClass'
        acceptors:
          type: array
          description: "references to accepting parties, only if applicable"
          items:
            type: string
            format: maas-id
      description: "A generic description of a card, asset class and acceptors is\
        \ only allowed for DISCOUNT/TRAVEL/OTHER cards"
    condition:
      required:
      - conditionType
      properties:
        conditionType:
          type: string
          description: "The specific subclass of condition, should match the schema\
            \ name exactly"
        id:
          type: string
          description: An identifier for this condition that can be used to refer
            to this condition
          example: deposit50eu
      example:
        conditionType: conditionType
        id: deposit50eu
      discriminator:
        propertyName: condition_type
      oneOf:
      - $ref: '#/components/schemas/conditionDeposit'
      - $ref: '#/components/schemas/conditionPayWhenFinished'
      - $ref: '#/components/schemas/conditionPostponedCommit'
      - $ref: '#/components/schemas/conditionRequireBookingData'
      - $ref: '#/components/schemas/conditionReturnArea'
      - $ref: '#/components/schemas/conditionUpfrontPayment'
    conditionDeposit:
      description: in case the TO demands a deposit before usage. Requesting and refunding
        should be done using the /payment/claim-extra-costs endpoint.
      allOf:
      - $ref: '#/components/schemas/condition'
      - $ref: '#/components/schemas/amountOfMoney'
    conditionPayWhenFinished:
      description: in case the TO demands a direct payment after usage.
      allOf:
      - $ref: '#/components/schemas/condition'
    conditionPostponedCommit:
      allOf:
      - $ref: '#/components/schemas/condition'
      - required:
        - ultimateResponseTime
        type: object
        properties:
          ultimateResponseTime:
            type: string
            format: date-time
    conditionRequireBookingData:
      type: object
      allOf:
      - $ref: '#/components/schemas/condition'
      - required:
        - requiredFields
        type: object
        properties:
          requiredFields:
            type: array
            items:
              type: string
              enum:
              - FROM_ADDRESS
              - TO_ADDRESS
              - BIRTHDATE
              - EMAIL
              - PERSONAL_ADDRESS
              - PHONE_NUMBERS
              - LICENSES
              - BANK_CARDS
              - DISCOUNT_CARDS
              - TRAVEL_CARDS
              - ID_CARDS
              - CREDIT_CARDS
              - NAME
              - AGE
              - BLOCKCHAIN_CLAIMS
          claims:
            type: array
            description: "when in the 'requiredFields' array 'BLOCKCHAIN_CLAIMS' is\
              \ specified, in this array claims can be specified. On the WIKI page,\
              \ the known ones are enlisted, but this list isn't finalized yet. https://github.com/TOMP-WG/TOMP-API/wiki/Blockchain---Verifiable-credentials"
            items:
              type: string
    conditionReturnArea:
      description: a return area. In the condition list there can be multiple return
        area's.
      allOf:
      - $ref: '#/components/schemas/condition'
      - type: object
        properties:
          stationId:
            type: string
            description: station to which the asset should be returned
          returnArea:
            description: area in which the asset should be returned as GeoJSON Polygon
              coordinates
            allOf:
            - $ref: '#/components/schemas/geojsonPolygon'
          coordinates:
            $ref: '#/components/schemas/coordinates'
          returnHours:
            type: array
            description: the return hours of the facility (if different from operating-hours)
            items:
              $ref: '#/components/schemas/systemHours'
    conditionUpfrontPayment:
      description: in case the TO demands a upfront payment before usage. The payment
        should be made in the booking phase.
      allOf:
      - $ref: '#/components/schemas/condition'
    confirmationRequest:
      type: object
      properties:
        type:
          type: string
          enum:
          - REPLACE_ASSET
          - START_LEG
        assetTypeId:
          type: string
          description: "reference to the assetType in /operator/available-assets,\
            \ this property can be set when replacing an asset (for another type).\
            \ In case of a succesfull replacement, the /legs/{id}/events - ASSIGN_ASSET\
            \ should be send to the MP to inform a change of asset has been made."
      description: "the TO can ask permission to do something to the MP, as the MP\
        \ is financially responsible."
    coordinates:
      required:
      - lat
      - lng
      type: object
      properties:
        lng:
          type: number
          example: 6.169639
        lat:
          type: number
          example: 52.253279
        alt:
          type: number
          description: "altitude, in meters above sea level"
      description: "a lon, lat (WGS84, EPSG:4326)"
      example:
        lng: 6.169639
        alt: 0.80082819046101150206595775671303272247314453125
        lat: 52.253279
    country:
      maxLength: 2
      minLength: 2
      type: string
      description: two-letter country codes according to ISO 3166-1
      example: NL
    customer:
      description: "A MaaS user that wishes to make a booking, only use the fields\
        \ required by booking conditions"
      allOf:
      - $ref: '#/components/schemas/traveler'
      - required:
        - id
        type: object
        properties:
          id:
            type: string
            description: The identifier MaaS uses to identify the customer
            example: A0-123456
          travelerReference:
            type: string
            description: optional reference field to the travelers in the planning
              request.
          initials:
            type: string
          firstName:
            type: string
            description: First name of the customer
            example: John
          lastName:
            type: string
            description: Last name of the customer
            example: Doe
          middleName:
            type: string
            description: Middle name of the customer
            example: von
          prefix:
            type: string
            description: "prefix of the customer, like titles"
          postfix:
            type: string
            description: "postfix of the customer, like titles"
          phones:
            type: array
            items:
              $ref: '#/components/schemas/phone'
          email:
            type: string
            description: the email address of the customer
          birthDate:
            type: string
            format: date
          address:
            $ref: '#/components/schemas/address'
          photo:
            type: string
            description: base64 encoded
            format: byte
          cards:
            type: array
            items:
              $ref: '#/components/schemas/card'
          licenses:
            type: array
            items:
              $ref: '#/components/schemas/license'
    day:
      type: string
      enum:
      - MON
      - TUE
      - WED
      - THU
      - FRI
      - SAT
      - SUN
    distance:
      minimum: 0
      type: integer
      description: The estimated distance travelled in the leg (in meters)
      example: 7250
    duration:
      maximum: 2147483647
      minimum: 0
      type: integer
      description: A duration of some time (relative to a time) in milliseconds
      example: 11112
    endpoint:
      required:
      - method
      - path
      - status
      type: object
      properties:
        method:
          type: string
          enum:
          - POST
          - PUT
          - GET
          - DELETE
          - PATCH
        path:
          type: string
          description: "the exact path of the endpoint, starting after the base URL"
          example: /plannings/
        eventType:
          type: string
          description: "in case the path is ending in /events, the event type/operator\
            \ enum should be added here."
          enum:
          - PREPARE
          - ASSIGN_ASSET
          - SET_IN_USE
          - PAUSE
          - START_FINISHING
          - FINISH
          - ISSUE
          - CANCEL
          - EXPIRE
          - DENY
          - COMMIT
        status:
          type: string
          enum:
          - NOT_IMPLEMENTED
          - DIALECT
          - IMPLEMENTED
        supportsPaging:
          type: boolean
          description: does this endpoint support paging? In that case this endpoint
            can be accessed using query parameters offset=x and limit=y. Only allowed
            at endpoints that have specified these query parameters.
          default: false
        maxPageSize:
          type: number
          description: "the maximum size of the pages (only valid when supportsPaging=true).\
            \ If the limit-parameter of the request is above this amount, a http code\
            \ 400 will be returned."
      description: a formal description of an endpoint.
      example:
        withoutPaging:
          method: POST
          path: "/booking/{id}/events"
          eventType: COMMIT
          status: IMPLEMENTED
        withPaging:
          method: POST
          path: /operator/stations
          status: IMPLEMENTED
          supportsPaging: true
          maxPageSize: 100
    endpointImplementation:
      required:
      - baseUrl
      - endpoints
      - processIdentifiers
      - scenarios
      - version
      type: object
      properties:
        version:
          type: string
        baseUrl:
          type: string
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/endpoint'
        scenarios:
          type: array
          items:
            $ref: '#/components/schemas/scenario'
        processIdentifiers:
          $ref: '#/components/schemas/processIdentifiers'
      description: "a complete endpoint description, containing all endpoints, their\
        \ status, but also the served scenarios and implemented process flows. The\
        \ identifiers for the process flows can be found at https://github.com/TOMP-WG/TOMP-API/wiki/ProcessIdentifiers"
      example:
        version: 0.5.0
        baseUrl: https://dummy-bikes.org/
        endpoints: []
        scenarios:
        - POSTPONED_COMMIT
        processIdentifiers:
          planning:
          - LOCATION_BASED
          booking:
          - ACCESS_CODE_QR
          - ACCESS_CODE_IN_COMMIT_EVENT
    error:
      type: object
      properties:
        errorcode:
          type: number
          description: The TOMP specific error code. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP
            for more details of this error.
        type:
          type: string
          description: The category of this type of error.
        title:
          type: string
          description: "A short, human-readable summary of the problem type.  It SHOULD\
            \ NOT change from occurrence to occurrence of the problem, except to match\
            \ Content-Language"
        status:
          type: integer
          description: "The HTTP status code ([RFC7231], Section 6) generated by the\
            \ origin server for this occurrence of the problem."
        detail:
          type: string
          description: "A human-readable explanation specific to this occurrence of\
            \ the problem, could match Content-Language"
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of
            the problem.  It may or may not yield further information if dereferenced.
      description: "An error that the service may send, e.g. in case of invalid input,\
        \ missing authorization or internal service error. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP\
        \ for further explanation of error code."
    extraCosts:
      description: Costs that the TO is charging the MP; credits are negative. Other
        amounts should be positive
      allOf:
      - $ref: '#/components/schemas/amountOfMoney'
      - required:
        - amount
        - category
        - description
        type: object
        properties:
          category:
            $ref: '#/components/schemas/journalCategory'
          description:
            type: string
            description: "free text to describe the extra costs. Mandatory in case\
              \ of 'OTHER', should match Content-Language"
          number:
            type: number
            description: "e.g. number of litres, number of kilowatthour, etc"
          numberType:
            type: string
            enum:
            - LITER
            - KILOWATTHOUR
            - CO2_COMPENSATION
            - OTHER
          account:
            $ref: '#/components/schemas/bankAccount'
          meta:
            type: object
            additionalProperties: true
            description: "Arbitrary metadata that a TO can add, like voucher codes"
    fare:
      required:
      - estimated
      - parts
      properties:
        estimated:
          type: boolean
          description: is this fare an estimation?
        description:
          type: string
          description: "user friendly description of the fare (e.g. 'full fare'),\
            \ should match Content-Language"
        class:
          type: string
          description: in the future we'll set up an enumeration of possible "fare
            classes". For now it's free format.
        parts:
          type: array
          items:
            $ref: '#/components/schemas/farePart'
      description: "the total fare is the sum of all parts, except for the 'MAX' farePart.\
        \ This one descripes the maximum price for the complete leg."
      example:
        estimated: true
        parts:
        - amount: 9.96
          currencyCode: EUR
          vatRate: 21
          type: FLEX
          unitType: HOUR
          units: 1
        - amount: 9.96
          currencyCode: EUR
          vatRate: 21
          type: FLEX
          unitType: HOUR
          units: 1
        description: description
        class: class
    farePart:
      description: "this describes a part of the fare (or discount). It contains a\
        \ for instance the startup costs (fixed) or the flex part (e.g. 1.25 EUR per\
        \ 2.0 MILES). The amount is tax included. In case of discounts, the values\
        \ are negative. With 'MAX' you can specify e.g. a maximum of 15 euro per day.\
        \ Percentage is mainly added for discounts. The `scale` properties create\
        \ the ability to communicate scales (e.g. the first 4 kilometers you've to\
        \ pay EUR 0.35 per kilometer, the kilometers 4 until 8 EUR 0.50 and above\
        \ it EUR 0.80 per kilometer)."
      example:
        amount: 9.96
        currencyCode: EUR
        vatRate: 21
        type: FLEX
        unitType: HOUR
        units: 1
      allOf:
      - $ref: '#/components/schemas/amountOfMoney'
      - required:
        - amount
        type: object
        properties:
          type:
            type: string
            description: "type of fare part. If there is only one farepart and this\
              \ field is missing, it should be assumed it is 'FIXED'. In all other\
              \ situations this field is mandatory."
            enum:
            - FIXED
            - FLEX
            - MAX
          unitType:
            type: string
            description: "in case of 'FLEX' mandatory, otherwise not allowed. E.g.\
              \ 0.5 EUR per HOUR"
            enum:
            - KM
            - SECOND
            - MINUTE
            - HOUR
            - MILE
            - PERCENTAGE
          units:
            type: number
            description: "the number of km, seconds etc. Mandatory when the type is\
              \ 'FLEX', otherwise not allowed. In case of 0.5 EUR per 15 MINUTES,\
              \ `units` should contain 15 and `unitType` MINUTES."
          scaleFrom:
            type: number
            description: "in case of scaling, this is the bottom value (f.x. in the\
              \ first hour 3 CAD, the `scaleFrom` should contain 0 and the `scaleType`\
              \ HOUR). When `scaleTo` is used, but this field is missing, it should\
              \ be assumed it is a 0."
          scaleTo:
            type: number
            description: "the upper value of the scale (f.x. 3 CAD in the first hour,\
              \ this field should contain 1, `scaleFrom` 0 and `scaleType` HOUR)"
          scaleType:
            type: string
            enum:
            - KM
            - MILE
            - HOUR
            - MINUTE
          name:
            type: string
            description: an optional description of this fare part.
          class:
            type: string
            description: class of this fare part. Could be FARE or ANCILLARY
            default: FARE
            enum:
            - FARE
            - ANCILLARY
          meta:
            type: object
            additionalProperties: true
    geojsonLine:
      type: array
      description: An array  of WGS84 coordinate pairs
      example:
      - - 6.169639
        - 52.253279
      - - 6.05623
        - 52.63473
      items:
        $ref: '#/components/schemas/geojsonPoint'
    geojsonPoint:
      maxItems: 2
      minItems: 2
      type: array
      description: Geojson Coordinate
      example:
      - lon
      - lat
      items:
        type: number
    geojsonPolygon:
      type: array
      description: "geojson representation of a polygon. First and last point must\
        \ be equal. See also https://geojson.org/geojson-spec.html#polygon and example\
        \ https://geojson.org/geojson-spec.html#id4. The order should be lon, lat\
        \ [[[lon1, lat1], [lon2,lat2], [lon3,lat3], [lon1,lat1]]], the first point\
        \ should match the last point."
      example:
      - - - 1
          - 1
        - - 0
          - 1
        - - 0
          - 0
        - - 1
          - 0
        - - 1
          - 1
      items:
        $ref: '#/components/schemas/geojsonLine'
    journalEntry:
      allOf:
      - $ref: '#/components/schemas/amountOfMoney'
      - type: object
        properties:
          category:
            $ref: '#/components/schemas/journalCategory'
          journalId:
            type: string
            description: "id of the entry, leg id can be reused"
          journalSequenceId:
            type: string
            description: "sequence id of the entry, in combination with journalId\
              \ unique from TO perspective."
          invoiceId:
            type: string
            description: the number of the invoice. Should be filled in when invoiced.
          invoiceDate:
            type: string
            format: date-time
          state:
            $ref: '#/components/schemas/journalState'
          expirationDate:
            type: string
            format: date-time
          comment:
            type: string
          distance:
            type: number
            description: the travelled distance. Only if applicable.
          distanceType:
            type: string
            enum:
            - KM
            - MILE
          usedTime:
            type: number
            description: the time in seconds that the assed is used. Only if applicable.
          rentalStartMileage:
            type: number
            description: the mileage at the start of the rental. 'DistanceType' field
              is also applicable here
          bankAccount:
            $ref: '#/components/schemas/bankAccount'
          details:
            description: the specification of the amount; how is it composed.
            oneOf:
            - $ref: '#/components/schemas/fare'
            - $ref: '#/components/schemas/extraCosts'
    journalState:
      type: string
      enum:
      - TO_INVOICE
      - INVOICED
    journalCategory:
      type: string
      enum:
      - ALL
      - DAMAGE
      - LOSS
      - STOLEN
      - EXTRA_USAGE
      - REFUND
      - FINE
      - OTHER_ASSET_USED
      - CREDIT
      - VOUCHER
      - DEPOSIT
      - OTHER
    leg:
      required:
      - assetType
      - from
      type: object
      properties:
        id:
          type: string
          description: The unique identifier (TO) of this leg
        from:
          description: "The departure location of this leg, using this asset type"
          allOf:
          - $ref: '#/components/schemas/place'
        to:
          description: "The destination of this leg, using this asset type"
          allOf:
          - $ref: '#/components/schemas/place'
        departureTime:
          type: string
          description: The departure time of this leg
          format: date-time
        arrivalTime:
          type: string
          description: The intended arrival time at the to place
          format: date-time
        travelerReferenceNumbers:
          type: array
          description: "reference to the travelers field of the request. If missing,\
            \ it is refering to the first (if any). it is an array to facilitate multiple\
            \ users on one leg (e.g. using a car). If multiple access informations\
            \ are needed, please create a leg per used asset."
          items:
            type: string
        assetType:
          description: The asset type used in this leg as determined during booking
          allOf:
          - $ref: '#/components/schemas/assetType'
        legSequenceNumber:
          type: integer
          description: The order of the leg in the booking. There can be multiple
            legs with the same sequence (different user or parallel usage (eg. parking
            lot and a bike)).
        asset:
          description: The concrete asset used for the execution of the leg
          allOf:
          - $ref: '#/components/schemas/asset'
        pricing:
          description: "The leg-specific pricing information, all fares are additive,\
            \ if the booking does not have pricing set all legs should"
          allOf:
          - $ref: '#/components/schemas/fare'
        suboperator:
          $ref: '#/components/schemas/suboperator'
        conditions:
          type: array
          description: "The conditions that apply to this leg, there may be more conditions\
            \ in a parent booking and planning object (if this is returned as part\
            \ of those)"
          items:
            $ref: '#/components/schemas/condition'
        state:
          $ref: '#/components/schemas/legState'
        departureDelay:
          $ref: '#/components/schemas/duration'
        arrivalDelay:
          $ref: '#/components/schemas/duration'
        distance:
          $ref: '#/components/schemas/distance'
        progressGeometry:
          description: "A list of coordinates describing the progress so far along\
            \ the leg, as GeoJSON LineString coordinates"
          allOf:
          - $ref: '#/components/schemas/geojsonLine'
        ticket:
          description: The MaaS user's proof of their right to travel on this leg
          allOf:
          - $ref: '#/components/schemas/token'
        assetAccessData:
          description: "Data to open a specific asset (e.g. QR code, image base64)"
          allOf:
          - $ref: '#/components/schemas/token'
        allAssetAccessData:
          description: "Array of data to open a specific asset (e.g. QR code, image\
            \ base64)"
          allOf:
          - $ref: '#/components/schemas/tokenArray'
      description: A planned (segment of) a booked trip using one asset type
    legEvent:
      required:
      - event
      - time
      type: object
      properties:
        time:
          type: string
          format: date-time
        event:
          type: string
          enum:
          - PREPARE
          - ASSIGN_ASSET
          - SET_IN_USE
          - PAUSE
          - START_FINISHING
          - FINISH
          - TIME_EXTEND
          - TIME_POSTPONE
          - CANCEL
        comment:
          type: string
          description: "free text, should match Content-Language"
        url:
          type: array
          description: urls to support the event e.g. pictures justifying the exit
            conditions
          items:
            type: string
            format: url
        asset:
          $ref: '#/components/schemas/asset'
      description: event for the execution
    legProgress:
      required:
      - coordinates
      type: object
      properties:
        coordinates:
          $ref: '#/components/schemas/coordinates'
        duration:
          $ref: '#/components/schemas/duration'
        distance:
          $ref: '#/components/schemas/distance'
      description: provides current asset location & duration and distance of the
        current leg
    legState:
      type: string
      description: status of a leg
      enum:
      - NOT_STARTED
      - PREPARING
      - IN_USE
      - PAUSED
      - FINISHING
      - FINISHED
      - ISSUE_REPORTED
      - CANCELLED
    license:
      description: driver or usage license for a specific user. Contains the number
        and the assetType you're allowed to operate (e.g. driver license for CAR)
      allOf:
      - $ref: '#/components/schemas/licenseType'
      - type: object
        properties:
          number:
            type: string
            example: "1287948792"
          licenseCode:
            type: string
            description: "in most countries a driver license has also a code. As TO\
              \ you can exactly verify, based on this code if the license allows to\
              \ operate it's assets, if the assetType too generic."
            example: D4
          validUntil:
            type: string
            format: date
    licenseType:
      required:
      - assetClass
      type: object
      properties:
        assetClass:
          $ref: '#/components/schemas/assetClass'
        issuingCountry:
          $ref: '#/components/schemas/country'
      description: A category of license to use a certain asset class
    notification:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          example: VEHICLE_NOT_AVAILABLE
          enum:
          - VEHICLE_NOT_AVAILABLE
          - USER_NO_SHOW
          - ETA
          - MESSAGE_TO_DRIVER
          - MESSAGE_TO_END_USER
          - OTHER
        minutes:
          type: number
          description: "in case of ETA, the number of minutes until arrival at the\
            \ pickup location"
        asset:
          $ref: '#/components/schemas/asset'
        comment:
          type: string
          description: "free text, should match Content-Language"
      description: notifies the MaaS operator of issues with a booking. Asset information
        can be provided when needed.
    phone:
      type: object
      properties:
        preferred:
          type: boolean
          description: only one phone in this array can have a true in this property
        number:
          pattern: "^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\.0-9]*$"
          type: string
          description: "phone number. In case of international usage, always provide\
            \ the country code."
          example: +31-48934758 or +(0075)-834923384 or 020 1234 1234
        kind:
          type: string
          enum:
          - LANDLINE
          - MOBILE
        type:
          type: string
          enum:
          - PRIVATE
          - BUSINESS
          - OTHER
    place:
      required:
      - coordinates
      type: object
      properties:
        name:
          type: string
          description: "Human readable name of the place, could match Content-Language"
        stopReference:
          type: array
          items:
            $ref: '#/components/schemas/stopReference'
        stationId:
          type: string
          description: reference to /operator/stations
        coordinates:
          $ref: '#/components/schemas/coordinates'
        physicalAddress:
          $ref: '#/components/schemas/address'
        extraInfo:
          type: object
          additionalProperties: true
      description: "a origin or destination of a leg, 3D. lon/lat in WGS84."
      example:
        name: name
        coordinates:
          lng: 6.169639
          alt: 0.80082819046101150206595775671303272247314453125
          lat: 52.253279
        physicalAddress:
          country: NL
          areaReference: "Smallcity, Pinetree county"
          province: province
          streetAddress: "example street 18, 2nd floor, 18-B33"
          city: city
          street: street
          postalCode: postalCode
          houseNumber: 0.602745618307040320615897144307382404804229736328125
          addressAdditionalInfo: addressAdditionalInfo
          state: state
          houseNumberAddition: houseNumberAddition
        stopReference:
        - country: NL
          id: id
          type: GTFS_STOP_ID
        - country: NL
          id: id
          type: GTFS_STOP_ID
        stationId: stationId
        extraInfo: ""
    planningRequest:
      required:
      - from
      type: object
      properties:
        from:
          $ref: '#/components/schemas/place'
        radius:
          type: number
          description: Maximum distance in meters a user wants to travel to reach
            the travel option
        to:
          $ref: '#/components/schemas/place'
        estimatedDistance:
          type: number
          description: "instead of using the from/to construct, it is also possible\
            \ to give an indication of the distance to travel. The process identifier\
            \ 'USE_ESTIMATED_DISTANCE' is used to indicate this scenario."
        departureTime:
          type: string
          description: "The intended departure time. If left out and no arrivalTime\
            \ is set, the current time should be assumed."
          format: date-time
        arrivalTime:
          type: string
          description: "The intended arrival time, at the to place if set otherwise\
            \ the time the user intends to stop using the asset."
          format: date-time
        nrOfTravelers:
          minimum: 1
          type: integer
          description: "The number of people that intend to travel, including the\
            \ customer."
        travelers:
          type: array
          description: "Extra information about the people that intend to travel if\
            \ relevant, length must be less than or equal to nrOftravelers."
          items:
            $ref: '#/components/schemas/traveler'
        useAssets:
          type: array
          description: The specific asset(s) the user wishes to receive leg options
            for
          items:
            type: string
            format: "an asset id for this operator, this might be an asset id from\
              \ /operator/available-assets, but can also be another identification\
              \ for this asset (e.g. bluetooth id)"
        userGroups:
          type: array
          description: Id(s) of user groups that the user belongs to. This provides
            access to exclusive assets that are hidden to the public. Id's are agreed
            upon by TO and MP.
          items:
            type: string
            format: a usergroup id for this operator
        useAssetTypes:
          type: array
          description: The specific asset type(s) the user wishes to receive leg options
            for
          items:
            type: string
            format: an asset type id for this operator (from /operator/available-assets)
      description: A travel planning for which bookable options are requested
    planning:
      required:
      - options
      - validUntil
      type: object
      properties:
        validUntil:
          type: string
          description: The time until which the presented options are (likely) available
          format: date-time
        options:
          type: array
          items:
            $ref: '#/components/schemas/booking'
      description: A travel planning with bookable options that fulfil the constraints
        of the planning
    processIdentifiers:
      required:
      - booking
      - general
      - operatorInformation
      - payment
      - planning
      - support
      - tripExecution
      type: object
      properties:
        operatorInformation:
          type: array
          items:
            type: string
        planning:
          type: array
          items:
            type: string
        booking:
          type: array
          items:
            type: string
        tripExecution:
          type: array
          items:
            type: string
        support:
          type: array
          items:
            type: string
        payment:
          type: array
          items:
            type: string
        general:
          type: array
          items:
            type: string
    requirement:
      required:
      - category
      - number
      type: object
      properties:
        source:
          type: string
          description: "if obsolete, it is referencing the travelers' dictionary (https://github.com/TOMP-WG/TOMP-API/blob/master/documents/CROW%20passenger%20characteristics.xlsx)"
        category:
          type: string
          description: "references to the first column of the specification initial\
            \ values [ HR, AV, HV, AB, AER, K, ZR, RR ]"
        number:
          maxLength: 2
          minLength: 2
          type: string
          description: references to the second column of the specification
        type:
          type: string
          description: "conditionally extra information, referencing to the 3th column"
        memo:
          type: string
          description: "extra field for detailed information, not standardized"
        variable-number:
          type: number
          description: "in some requirements there is references to '[variable number]'\
            \ e.g. of meters (like ZR06)"
        applicable-days:
          type: array
          description: days of week that are applicable
          items:
            type: string
            enum:
            - MO
            - TU
            - WE
            - TH
            - FR
            - SA
            - SU
      description: describes an (dis)ability or ancillary.
      example:
        number: number
        variable-number: 2.027123023002321833274663731572218239307403564453125
        memo: memo
        source: source
        category: category
        type: type
        applicable-days:
        - MO
        - MO
    requirements:
      type: object
      properties:
        abilities:
          type: array
          items:
            $ref: '#/components/schemas/requirement'
        bringAlong:
          type: array
          items:
            $ref: '#/components/schemas/requirement'
      additionalProperties: true
      description: Requirements from the end user side.
    scenario:
      type: string
      enum:
      - POSTPONED_COMMIT
      - DEPOSIT
      - PAY_WHEN_FINISHED
      - REQUIRE_BOOKING_DATA
      - RETURN_AREA
      - UPFRONT_PAYMENT
    stationInformation:
      required:
      - coordinates
      - name
      - stationId
      type: object
      properties:
        stationId:
          type: string
          description: unique identifier of a station
          example: XX:Y:12345678
        name:
          type: string
          description: "public name of the station, could match Content-Language"
          example: Island Central
        coordinates:
          $ref: '#/components/schemas/coordinates'
        physicalAddress:
          $ref: '#/components/schemas/address'
        crossStreet:
          type: string
          description: "Cross street of where the station is located. This field is\
            \ intended to be a descriptive field for human consumption. In cities,\
            \ this would be a cross street, but could also be a description of a location\
            \ in a park, etc, should match Content-Language"
          example: on the corner with Secondary Road
        regionId:
          type: string
          description: ID of the region where the station operates (see "systemRegions")
        rentalMethods:
          type: array
          description: Array of enumerables containing the payment methods accepted
            at this station.
          example:
          - CREDITCARD
          - PAYPASS
          - APPLEPAY
          items:
            type: string
            enum:
            - KEY
            - CREDITCARD
            - PAYPASS
            - APPLEPAY
            - ANDROIDPAY
            - TRANSITCARD
            - ACCOUNTNUMBER
            - PHONE
            - OTHER
        rentalUrl:
          type: string
          description: web uri for renting assets at this station. Only added to be
            consistent with GBFS 2.0.
          format: URL
          example: https://www.rentmyfreebike.com
          deprecated: true
        rentalUrlAndroid:
          type: string
          description: android uri for renting assets at this station. Only added
            to be consistent with GBFS 2.0.
          format: URL
          example: https://www.rentmyfreebikecom/app?sid=1234567890&platform=android
          deprecated: true
        rentalUrlIOS:
          type: string
          description: ios uri for renting assets at this station. Only added to be
            consistent with GBFS 2.0.
          format: URL
          example: https://www.rentmyfreebike.com/app?sid=1234567890&platform=ios
          deprecated: true
      example:
        rentalUrl: https://www.rentmyfreebike.com
        regionId: regionId
        name: Island Central
        coordinates:
          lng: 6.169639
          alt: 0.80082819046101150206595775671303272247314453125
          lat: 52.253279
        physicalAddress:
          country: NL
          areaReference: "Smallcity, Pinetree county"
          province: province
          streetAddress: "example street 18, 2nd floor, 18-B33"
          city: city
          street: street
          postalCode: postalCode
          houseNumber: 0.602745618307040320615897144307382404804229736328125
          addressAdditionalInfo: addressAdditionalInfo
          state: state
          houseNumberAddition: houseNumberAddition
        rentalMethods:
        - CREDITCARD
        - PAYPASS
        - APPLEPAY
        crossStreet: on the corner with Secondary Road
        rentalUrlAndroid: https://www.rentmyfreebikecom/app?sid=1234567890&platform=android
        rentalUrlIOS: https://www.rentmyfreebike.com/app?sid=1234567890&platform=ios
        stationId: XX:Y:12345678
    stopReference:
      required:
      - country
      - id
      - type
      type: object
      properties:
        type:
          type: string
          description: "type of external reference (GTFS, CHB)."
          enum:
          - GTFS_STOP_ID
          - GTFS_STOP_CODE
          - GTFS_AREA_ID
          - CHB_STOP_PLACE_CODE
          - CHB_QUAY_CODE
          - NS_CODE
        id:
          type: string
          description: this field should contain the complete ID. E.g. NL:S:13121110
            or BE:S:79640040
        country:
          $ref: '#/components/schemas/country'
      description: reference to a stop (can be nation specific). This can help to
        specific pinpoint a (bus) stop. Extra information about the stop is not supplied;
        you should find it elsewhere.
      example:
        country: NL
        id: id
        type: GTFS_STOP_ID
    suboperator:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: "Name of the operator, could match Content-Language"
        maasId:
          type: string
          description: the maasId from the operator
        description:
          type: string
          description: "short description of the operator, should match Content-Language"
        contact:
          type: string
          description: "contact information, should match Content-Language"
      description: "The operator of a leg or asset, in case this is not the TO itself\
        \ but should be shown to the user"
    supportRequest:
      type: object
      properties:
        id:
          type: string
          description: the booking id
        supportType:
          type: string
          enum:
          - BROKEN_DOWN
          - NOT_AT_LOCATION
          - MISSING_AFTER_PAUSE
          - NOT_CLEAN
          - NOT_AVAILABLE
          - UNABLE_TO_OPEN
          - UNABLE_TO_CLOSE
          - API_TECHNICAL
          - API_FUNCTIONAL
          - ACCIDENT
          - OTHER
        location:
          $ref: '#/components/schemas/place'
        time:
          type: string
          format: date-time
        priority:
          type: string
          description: the priority of the support request.
          enum:
          - ERROR_CANNOT_CONTINUE
          - ERROR_CAN_CONTINUE
          - DISTURBING_ISSUE
          - QUESTION
          - OTHER
        contactInformationEndUser:
          type: string
          description: "contact information of the end user in case of direct response\
            \ requests, like phone number"
        comment:
          type: string
        requestedResponseTime:
          type: number
          description: time to respond in minutes.
      description: request for support
    supportStatus:
      type: object
      properties:
        status:
          type: string
          example: PROCESSING
          enum:
          - PROCESSING
          - UPDATE_REQUESTED
          - RESOLVED
          - CANCELLED
        timeToResolution:
          type: integer
          description: time in minutes to expected resolution of support request
          example: 9
        order:
          type: integer
          description: the sequence number of status of the support issue
        comment:
          type: string
          description: free text to send to the end user.
      description: the current status of support
      allOf:
      - $ref: '#/components/schemas/supportRequest'
    systemAlert:
      required:
      - alertId
      - alertType
      - summary
      type: object
      properties:
        alertId:
          type: string
          description: a unique identifier for this alert
        alertType:
          type: string
          enum:
          - SYSTEM_CLOSURE
          - STATION_CLOSURE
          - STATION_MOVE
          - OTHER
        startAndEndTimes:
          type: array
          description: "Array of hashes with the keys \"start\" and \"end\" indicating\
            \ when the alert is in effect (e.g. when the system or station is actually\
            \ closed, or when it is scheduled to be moved). If this array is omitted\
            \ then the alert should be displayed as long as it is in the feed."
          items:
            type: array
            items:
              maxItems: 2
              minItems: 2
              type: string
              format: date-time
        stationIds:
          type: array
          description: "Array of strings - If this is an alert that affects one or\
            \ more stations, include their ids, otherwise omit this field. If both\
            \ stationIDs and regionIDs are omitted, assume this alert affects the\
            \ entire system"
          example: stationID0001
          items:
            type: string
        regionId:
          type: array
          description: "Array of strings - If this system has regions, and if this\
            \ alert only affects certain regions, include their ids, otherwise, omit\
            \ this field. If both stationIDs and regionIDs are omitted, assume this\
            \ alert affects the entire system"
          example: regionID0001
          items:
            type: string
        url:
          type: string
          description: "URL where the customer can learn more information about this\
            \ alert, if there is one"
          format: hostname
          example: http://www.rentmyfreebike.com/alerts
        summary:
          type: string
          description: "A short summary of this alert to be displayed to the customer,\
            \ should match Content-Language"
          example: station closed
        description:
          type: string
          description: "Detailed text description of the alert, should match Content-Language"
          example: station closed indefinitely due to vandalism
        lastUpdated:
          type: string
          format: date-time
      example:
        summary: station closed
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        alertType: SYSTEM_CLOSURE
        startAndEndTimes:
        - - 2000-01-23T04:56:07.000+00:00
          - 2000-01-23T04:56:07.000+00:00
        - - 2000-01-23T04:56:07.000+00:00
          - 2000-01-23T04:56:07.000+00:00
        stationIds: stationID0001
        regionId: regionID0001
        description: station closed indefinitely due to vandalism
        alertId: alertId
        url: http://www.rentmyfreebike.com/alerts
    systemCalendar:
      required:
      - endDay
      - endMonth
      - startDay
      - startMonth
      type: object
      properties:
        stationId:
          type: string
          description: "If this parameter is present, it means that start and end\
            \ prameters correspond to the opening and closing days of the station.\
            \ (GET /operator/stations)"
        regionId:
          type: string
          description: "If this parameter is present, it means that start and end\
            \ prameters correspond to the opening and closing days for the region.\
            \ (GET /operator/regions)"
        startMonth:
          maximum: 12
          minimum: 1
          type: integer
          description: Starting month for the system operations (1-12)
          example: 1
        startDay:
          maximum: 31
          minimum: 1
          type: integer
          description: Starting day for the system operations (1-31)
          example: 1
        startYear:
          type: integer
          description: Starting year for the system operations
          example: 2019
        endMonth:
          maximum: 12
          minimum: 1
          type: integer
          description: Ending month for the system operations (1-12)
          example: 12
        endDay:
          maximum: 31
          minimum: 1
          type: integer
          description: Ending day for the system operations (1-31)
          example: 31
        endYear:
          type: integer
          description: Ending year for the system operations
          example: 2099
      example:
        regionId: regionId
        startMonth: 1
        startDay: 1
        endDay: 31
        startYear: 2019
        endMonth: 12
        endYear: 2099
        stationId: stationId
    systemHours:
      required:
      - days
      - endTime
      - startTime
      type: object
      properties:
        userType:
          type: string
          description: This indicates that this set of rental hours applies to either
            members or non-members only.
          example: MEMBER
          enum:
          - MEMBER
          - NON_MEMBERS
        stationId:
          type: string
          description: "If this parameter is present, it means that startTime and\
            \ endTime correspond to the opening and closing hours of the station.\
            \ (GET /operator/stations)"
        regionId:
          type: string
          description: "If this parameter is present, it means that startTime and\
            \ endTime correspond to the opening and closing hours for the region.\
            \ (GET /operator/regions)"
        startTime:
          type: string
          format: HH:MM time
        endTime:
          type: string
          format: HH:MM time
        days:
          type: array
          description: "An array of abbreviations (first 3 letters) of English names\
            \ of the days of the week that this hour object applies to (i.e. [\"mon\"\
            , \"tue\"]). Each day can only appear once within all of the hours objects\
            \ in this feed."
          items:
            $ref: '#/components/schemas/day'
      example:
        regionId: regionId
        days:
        - MON
        - MON
        startTime: startTime
        userType: MEMBER
        endTime: endTime
        stationId: stationId
    systemInformation:
      required:
      - language
      - name
      - systemId
      - timezone
      - typeOfSystem
      properties:
        systemId:
          type: string
          description: identifier for this transport system. This should be globally
            unique (even between different systems)
          example: XXTO0001
        language:
          type: array
          description: The languages supported by this operator for user-facing text.
            These can be requested using the Accept-Language header and should then
            be returned in Content-Language
          items:
            type: string
            format: One IETF BCP 47 (RFC 5646) language tag
            example: fr-FR
        name:
          type: string
          description: "Full name of the system to be displayed to customers, could\
            \ match Content-Language"
          example: FreeBike
        shortName:
          type: string
          description: Optional abbreviation for a system
          example: FB
        operator:
          type: string
          description: "Name of the operator of the system, could match Content-Language"
          example: FreeBike
        url:
          type: string
          description: "The URL of the transport operator. The value must be a fully\
            \ qualified URL that includes http:// or https://, and any special characters\
            \ in the URL must be correctly escaped."
          format: URL
          example: https://www.rentmyfreebike.com
        purchaseUrl:
          type: string
          description: A fully qualified URL where a customer can purchase a membership
            or learn more about purchasing memberships
          format: URL
          example: https://www.rentmyfreebike.com/purchase
        discoveryUriAndroid:
          type: string
          description: Uri to detect if the app is available at the mobile.
          format: URL
        discoveryUriIOS:
          type: string
          description: Uri to detect if the app is available at the mobile.
          format: URL
        storeUriAndroid:
          type: string
          description: Uri to the app in the store.
          format: URL
          example: https://play.google.com/store/apps/details?id=com.rentmyfreebike.android
        storeUriIOS:
          type: string
          description: Uri to the app in the store.
          format: URL
          example: itms-apps://itunes.apple.com/app/idcom.rentmyfreebike.ios
        startDate:
          type: string
          format: date
        phoneNumber:
          type: string
          description: A single voice telephone number for the specified system. This
            field is a string value that presents the telephone number as typical
            for the system's service area. It can and should contain punctuation marks
            to group the digits of the number.
          example: 555-12345
        email:
          type: string
          description: A single contact email address for customers to address questions
            about the system
          format: email
          example: rent@freebike.com
        feedContactEmail:
          type: string
          description: A single contact email address for consumers of this feed to
            report technical issues.
          format: email
        timezone:
          type: string
          description: The time zone where the system is located. Time zone names
            never contain the space character but may contain an underscore. Please
            refer to the "TZ" value in https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
            for a list of valid values
          example: IST
        licenseUrl:
          type: string
          description: "A fully qualified URL of a page that defines the license terms\
            \ for the GBFS data for this system, as well as any other license terms\
            \ the system would like to define (including the use of corporate trademarks,\
            \ etc)"
          example: https://www.rentmyfreebike.com/license
        typeOfSystem:
          type: string
          description: Describes the type of system
          example: FREE_FLOATING
          enum:
          - FREE_FLOATING
          - STATION_BASED
          - VIRTUAL_STATION_BASED
        chamberOfCommerceInfo:
          $ref: '#/components/schemas/chamberOfCommerceInfo'
        conditions:
          type: string
          description: "Added to include possibility to communicatie general rental\
            \ conditions like minimum age, max. reservation time etc. [amended]"
        productType:
          type: string
          description: the type of product offered. SHARING should also be used for
            public transport.
          enum:
          - RENTAL
          - SHARING
          - PARKING
          - CHARGING
        assetClasses:
          type: array
          items:
            $ref: '#/components/schemas/assetClass'
      example:
        licenseUrl: https://www.rentmyfreebike.com/license
        systemId: XXTO0001
        discoveryUriAndroid: discoveryUriAndroid
        timezone: IST
        language:
        - fr-FR
        - fr-FR
        storeUriAndroid: https://play.google.com/store/apps/details?id=com.rentmyfreebike.android
        discoveryUriIOS: discoveryUriIOS
        storeUriIOS: itms-apps://itunes.apple.com/app/idcom.rentmyfreebike.ios
        operator: FreeBike
        url: https://www.rentmyfreebike.com
        chamberOfCommerceInfo:
          number: number
          place: place
        purchaseUrl: https://www.rentmyfreebike.com/purchase
        typeOfSystem: FREE_FLOATING
        phoneNumber: 555-12345
        name: FreeBike
        feedContactEmail: ""
        shortName: FB
        conditions: conditions
        assetClasses:
        - AIR
        - AIR
        startDate: 2000-01-23
        email: rent@freebike.com
        productType: RENTAL
    systemPricingPlan:
      required:
      - description
      - fare
      - isTaxable
      - name
      - planId
      type: object
      properties:
        planId:
          type: string
          description: a unique identifier for this plan in the system
          example: freeplan1
        url:
          type: string
          description: a fully qualified URL where the customer can learn more about
            this particular scheme
          example: https://www.rentmyfreebike.com/freeplan
        name:
          type: string
          description: "name of this pricing scheme, could match Content-Language"
          example: Free Plan
        stationId:
          type: string
          description: pricing plan for a specific station
        regionId:
          type: string
          description: pricing plan for a specific region
        fare:
          $ref: '#/components/schemas/fare'
        isTaxable:
          type: boolean
          description: "false indicates that no additional tax will be added (either\
            \ because tax is not charged, or because it is included) true indicates\
            \ that tax will be added to the base price"
        description:
          type: string
          description: "Text field describing the particular pricing plan in human\
            \ readable terms. This should include the duration, price, conditions,\
            \ etc. that the publisher would like users to see. This is intended to\
            \ be a human-readable description and should not be used for automatic\
            \ calculations, should match Content-Language"
          example: "Unlimited plan for free bikes, as long as you don't break them!"
      example:
        fare:
          estimated: true
          parts:
          - amount: 9.96
            currencyCode: EUR
            vatRate: 21
            type: FLEX
            unitType: HOUR
            units: 1
          - amount: 9.96
            currencyCode: EUR
            vatRate: 21
            type: FLEX
            unitType: HOUR
            units: 1
          description: description
          class: class
        regionId: regionId
        name: Free Plan
        isTaxable: true
        description: "Unlimited plan for free bikes, as long as you don't break them!"
        planId: freeplan1
        url: https://www.rentmyfreebike.com/freeplan
        stationId: stationId
    systemRegion:
      required:
      - name
      - regionId
      type: object
      properties:
        regionId:
          type: string
          description: Unique identifier for this region
          example: BikeRegion
        name:
          type: string
          description: "Public name for this region, could match Content-Language"
          example: BikeTown
        type:
          type: string
          description: "the type of area. Default this is 'OPERATING', but other area's\
            \ can be published here as well (since 1.3.0). Before 1.3.0, it was only\
            \ allowed to communicate OPERATING area's."
          default: OPERATING
          enum:
          - OPERATING
          - PROHIBITED_TO_ACCESS
          - PROHIBITED_TO_PAUSE
          - PARKING
          - DISCOUNT
        serviceArea:
          description: The area served by the region (i.e. where one may travel using
            the service's assets) as GeoJSON Polygon coordinates
          allOf:
          - $ref: '#/components/schemas/geojsonPolygon'
      example:
        serviceArea: ""
        regionId: BikeRegion
        name: BikeTown
        type: OPERATING
    token:
      required:
      - tokenType
      - validFrom
      - validUntil
      type: object
      properties:
        validFrom:
          type: string
          format: date-time
        validUntil:
          type: string
          format: date-time
        tokenType:
          type: string
          description: "The type of data held in this token, will later be an enum"
          example: QR-code
        tokenData:
          $ref: '#/components/schemas/tokenData'
      description: "The validity token (such as booking ID, travel ticket etc.) that\
        \ MaaS clients will display to show their right to travel, or use to access\
        \ an asset"
    tokenArray:
      type: array
      items:
        $ref: '#/components/schemas/token'
    tokenData:
      required:
      - tokenType
      type: object
      properties:
        tokenType:
          type: string
      additionalProperties: true
      discriminator:
        propertyName: tokenType
    tokenDefault:
      type: object
      description: Arbitrary data the TO may pass along the ticket to the client
      allOf:
      - $ref: '#/components/schemas/tokenData'
    tokenDeeplink:
      type: object
      properties:
        url:
          type: string
          description: the base deeplink url for the MP app. Can be extended by the
            'knownParamaters'. Including the scheme.
          format: URI
          example: mp1.app://something/?auth=sdfkjhrkjsdf003df38=dfsdf
        knownParameters:
          type: array
          example:
          - return-url
          - error-url
          - error-code
          - error-description
          items:
            type: string
      description: deeplink info
      allOf:
      - $ref: '#/components/schemas/tokenData'
    tokenEKey:
      required:
      - ekey
      - lock
      type: object
      properties:
        ekey:
          $ref: '#/components/schemas/tokenEKey_ekey'
        lock:
          $ref: '#/components/schemas/tokenEKey_lock'
      description: Axa EKey information
      allOf:
      - $ref: '#/components/schemas/tokenData'
    tokenQR:
      required:
      - base64
      type: object
      properties:
        base64:
          type: string
          description: base 64 QR code
        version:
          type: string
      description: QR information
      allOf:
      - $ref: '#/components/schemas/tokenData'
    chamberOfCommerceInfo:
      type: object
      properties:
        number:
          type: string
        place:
          type: string
      description: To identify the operator
      example:
        number: number
        place: place
    traveler:
      type: object
      properties:
        isValidated:
          type: boolean
          description: Whether this traveler's identity and properties have been verified
            by the MaaS provider
        age:
          type: integer
          description: "Age of the traveler, may be approximate"
        referenceNumber:
          type: string
          description: reference number of the traveler. This number could be used
            to refer to in the planning result.
        cardTypes:
          type: array
          description: The kind of cards this traveler possesses
          items:
            $ref: '#/components/schemas/cardType'
        licenseTypes:
          type: array
          description: The kind of licenses this traveler possesses
          items:
            $ref: '#/components/schemas/licenseType'
        requirements:
          $ref: '#/components/schemas/requirements'
        knownIdentifier:
          type: string
          description: identifier for this traveler in the personal data store. This
            identifier can be used to get personal information from the provider specified
            in the "knownIdentifierProvider"
        knownIdentifierProvider:
          type: string
          description: provider for personal information. Can be a URI or identifier.
      description: "A generic description of a traveler, not including any identifying\
        \ information"
    booking_extraData:
      type: object
      properties:
        safeWaitTime:
          type: number
          description: the predicted time before the asset will arrive
        maxWaitTime:
          type: number
          description: the maximum time before the asset will arrive
        safeTravelTime:
          type: number
          description: the predicted time the legs will take
        maxTravelTime:
          type: number
          description: the maximum time the legs will take
      additionalProperties: true
      description: Arbitrary information that a TO can add
    tokenEKey_ekey:
      type: object
      properties:
        key:
          type: string
          description: certificate
        passkey:
          type: string
          description: one time pass key
    tokenEKey_lock:
      type: object
      properties:
        bdAddress:
          type: string
          description: physical address
        deviceName:
          type: string
          description: how it advertises itself
  responses:
    "202Accepted":
      description: Request was successfully accepted for processing but has not yet
        completed.
      headers:
        Location:
          description: The URI where the created or updated resource will eventually
            be found.
          style: simple
          explode: false
          schema:
            type: string
          example: /bookings/1234
    "204NoContent":
      description: "Request was successful, no content to return."
    "400BadRequest":
      description: Bad request. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP
        for further explanation of error code.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    "401Unauthorized":
      description: "Although the HTTP standard specifies \"unauthorized\", semantically\
        \ this response means \"unauthenticated\". That is, the client must authenticate\
        \ itself to get the requested response."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    "403Forbidden":
      description: "The client does not have access rights to the content, i.e. they\
        \ are unauthorized, so server is rejecting to give proper response. Unlike\
        \ 401, the client's identity is known to the server."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    "404NotFound":
      description: The requested resources does not exist or the requester is not
        authorized to see it or know it exists.
    "409Conflict":
      description: "The request will not be fulfilled. The request itself is legal,\
        \ but the content conflicts with the server and might be stale. The user might\
        \ try again after looking up the current state of the resource."
    "410Gone":
      description: The requested resource is no longer available. This is permanent.
  parameters:
    acceptLanguage:
      name: Accept_Language
      in: header
      description: "A list of the languages/localizations the user would like to see\
        \ the results in. For user privacy and ease of use on the TO side, this list\
        \ should be kept as short as possible, ideally just one language tag from\
        \ the list in operator/information"
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: A comma-separated list of BCP 47 (RFC 5646) language tags and optional
          weights as described in IETF RFC7231 section 5.3.5
      example: "nl, de;q=0.7"
    api:
      name: Api
      in: header
      description: "API description, can be TOMP or maybe other (specific/derived)\
        \ API definitions"
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: TOMP
    apiVersion:
      name: Api_Version
      in: header
      description: Version of the API.
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: 0.6.0
    maasId:
      name: maas_id
      in: header
      description: The ID of the sending maas operator
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: 1324A-DFB3482-32ACD
    addressedTo:
      name: addressed_to
      in: header
      description: The ID of the maas operator that has to receive this message
      required: false
      style: simple
      explode: false
      schema:
        type: string
      example: 1324A-DFB3482-32ACD
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      x-basicInfoFunc: swagger_server.controllers.authorization_controller.check_BasicAuth
    BearerAuth:
      type: http
      scheme: bearer
      x-bearerInfoFunc: swagger_server.controllers.authorization_controller.check_BearerAuth
    ApiKeyAuth:
      type: apiKey
      name: X-API-Key
      in: header
      x-apikeyInfoFunc: swagger_server.controllers.authorization_controller.check_ApiKeyAuth
    OAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /oauth/authorize
          tokenUrl: /oauth/token
          scopes: {}
      x-tokenInfoFunc: swagger_server.controllers.authorization_controller.check_OAuth
      x-scopeValidateFunc: swagger_server.controllers.authorization_controller.validate_scope_OAuth
    OpenId:
      type: openIdConnect
      openIdConnectUrl: https://unknownserver/.well-known/openid-configuration

