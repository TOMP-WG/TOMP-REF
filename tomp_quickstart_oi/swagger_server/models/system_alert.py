# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SystemAlert(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, alert_id: str=None, alert_type: str=None, start_and_end_times: List[List[datetime]]=None, station_ids: List[str]=None, region_id: List[str]=None, url: str=None, summary: str=None, description: str=None, last_updated: datetime=None):  # noqa: E501
        """SystemAlert - a model defined in Swagger

        :param alert_id: The alert_id of this SystemAlert.  # noqa: E501
        :type alert_id: str
        :param alert_type: The alert_type of this SystemAlert.  # noqa: E501
        :type alert_type: str
        :param start_and_end_times: The start_and_end_times of this SystemAlert.  # noqa: E501
        :type start_and_end_times: List[List[datetime]]
        :param station_ids: The station_ids of this SystemAlert.  # noqa: E501
        :type station_ids: List[str]
        :param region_id: The region_id of this SystemAlert.  # noqa: E501
        :type region_id: List[str]
        :param url: The url of this SystemAlert.  # noqa: E501
        :type url: str
        :param summary: The summary of this SystemAlert.  # noqa: E501
        :type summary: str
        :param description: The description of this SystemAlert.  # noqa: E501
        :type description: str
        :param last_updated: The last_updated of this SystemAlert.  # noqa: E501
        :type last_updated: datetime
        """
        self.swagger_types = {
            'alert_id': str,
            'alert_type': str,
            'start_and_end_times': List[List[datetime]],
            'station_ids': List[str],
            'region_id': List[str],
            'url': str,
            'summary': str,
            'description': str,
            'last_updated': datetime
        }

        self.attribute_map = {
            'alert_id': 'alertId',
            'alert_type': 'alertType',
            'start_and_end_times': 'startAndEndTimes',
            'station_ids': 'stationIds',
            'region_id': 'regionId',
            'url': 'url',
            'summary': 'summary',
            'description': 'description',
            'last_updated': 'lastUpdated'
        }
        self._alert_id = alert_id
        self._alert_type = alert_type
        self._start_and_end_times = start_and_end_times
        self._station_ids = station_ids
        self._region_id = region_id
        self._url = url
        self._summary = summary
        self._description = description
        self._last_updated = last_updated

    @classmethod
    def from_dict(cls, dikt) -> 'SystemAlert':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The systemAlert of this SystemAlert.  # noqa: E501
        :rtype: SystemAlert
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_id(self) -> str:
        """Gets the alert_id of this SystemAlert.

        a unique identifier for this alert  # noqa: E501

        :return: The alert_id of this SystemAlert.
        :rtype: str
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id: str):
        """Sets the alert_id of this SystemAlert.

        a unique identifier for this alert  # noqa: E501

        :param alert_id: The alert_id of this SystemAlert.
        :type alert_id: str
        """
        if alert_id is None:
            raise ValueError("Invalid value for `alert_id`, must not be `None`")  # noqa: E501

        self._alert_id = alert_id

    @property
    def alert_type(self) -> str:
        """Gets the alert_type of this SystemAlert.


        :return: The alert_type of this SystemAlert.
        :rtype: str
        """
        return self._alert_type

    @alert_type.setter
    def alert_type(self, alert_type: str):
        """Sets the alert_type of this SystemAlert.


        :param alert_type: The alert_type of this SystemAlert.
        :type alert_type: str
        """
        allowed_values = ["SYSTEM_CLOSURE", "STATION_CLOSURE", "STATION_MOVE", "OTHER"]  # noqa: E501
        if alert_type not in allowed_values:
            raise ValueError(
                "Invalid value for `alert_type` ({0}), must be one of {1}"
                .format(alert_type, allowed_values)
            )

        self._alert_type = alert_type

    @property
    def start_and_end_times(self) -> List[List[datetime]]:
        """Gets the start_and_end_times of this SystemAlert.

        Array of hashes with the keys \"start\" and \"end\" indicating when the alert is in effect (e.g. when the system or station is actually closed, or when it is scheduled to be moved). If this array is omitted then the alert should be displayed as long as it is in the feed.  # noqa: E501

        :return: The start_and_end_times of this SystemAlert.
        :rtype: List[List[datetime]]
        """
        return self._start_and_end_times

    @start_and_end_times.setter
    def start_and_end_times(self, start_and_end_times: List[List[datetime]]):
        """Sets the start_and_end_times of this SystemAlert.

        Array of hashes with the keys \"start\" and \"end\" indicating when the alert is in effect (e.g. when the system or station is actually closed, or when it is scheduled to be moved). If this array is omitted then the alert should be displayed as long as it is in the feed.  # noqa: E501

        :param start_and_end_times: The start_and_end_times of this SystemAlert.
        :type start_and_end_times: List[List[datetime]]
        """

        self._start_and_end_times = start_and_end_times

    @property
    def station_ids(self) -> List[str]:
        """Gets the station_ids of this SystemAlert.

        Array of strings - If this is an alert that affects one or more stations, include their ids, otherwise omit this field. If both stationIDs and regionIDs are omitted, assume this alert affects the entire system  # noqa: E501

        :return: The station_ids of this SystemAlert.
        :rtype: List[str]
        """
        return self._station_ids

    @station_ids.setter
    def station_ids(self, station_ids: List[str]):
        """Sets the station_ids of this SystemAlert.

        Array of strings - If this is an alert that affects one or more stations, include their ids, otherwise omit this field. If both stationIDs and regionIDs are omitted, assume this alert affects the entire system  # noqa: E501

        :param station_ids: The station_ids of this SystemAlert.
        :type station_ids: List[str]
        """

        self._station_ids = station_ids

    @property
    def region_id(self) -> List[str]:
        """Gets the region_id of this SystemAlert.

        Array of strings - If this system has regions, and if this alert only affects certain regions, include their ids, otherwise, omit this field. If both stationIDs and regionIDs are omitted, assume this alert affects the entire system  # noqa: E501

        :return: The region_id of this SystemAlert.
        :rtype: List[str]
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id: List[str]):
        """Sets the region_id of this SystemAlert.

        Array of strings - If this system has regions, and if this alert only affects certain regions, include their ids, otherwise, omit this field. If both stationIDs and regionIDs are omitted, assume this alert affects the entire system  # noqa: E501

        :param region_id: The region_id of this SystemAlert.
        :type region_id: List[str]
        """

        self._region_id = region_id

    @property
    def url(self) -> str:
        """Gets the url of this SystemAlert.

        URL where the customer can learn more information about this alert, if there is one  # noqa: E501

        :return: The url of this SystemAlert.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this SystemAlert.

        URL where the customer can learn more information about this alert, if there is one  # noqa: E501

        :param url: The url of this SystemAlert.
        :type url: str
        """

        self._url = url

    @property
    def summary(self) -> str:
        """Gets the summary of this SystemAlert.

        A short summary of this alert to be displayed to the customer, should match Content-Language  # noqa: E501

        :return: The summary of this SystemAlert.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary: str):
        """Sets the summary of this SystemAlert.

        A short summary of this alert to be displayed to the customer, should match Content-Language  # noqa: E501

        :param summary: The summary of this SystemAlert.
        :type summary: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")  # noqa: E501

        self._summary = summary

    @property
    def description(self) -> str:
        """Gets the description of this SystemAlert.

        Detailed text description of the alert, should match Content-Language  # noqa: E501

        :return: The description of this SystemAlert.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this SystemAlert.

        Detailed text description of the alert, should match Content-Language  # noqa: E501

        :param description: The description of this SystemAlert.
        :type description: str
        """

        self._description = description

    @property
    def last_updated(self) -> datetime:
        """Gets the last_updated of this SystemAlert.


        :return: The last_updated of this SystemAlert.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated: datetime):
        """Sets the last_updated of this SystemAlert.


        :param last_updated: The last_updated of this SystemAlert.
        :type last_updated: datetime
        """

        self._last_updated = last_updated
