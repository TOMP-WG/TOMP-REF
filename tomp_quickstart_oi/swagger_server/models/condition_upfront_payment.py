# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.condition import Condition  # noqa: F401,E501
from swagger_server import util


class ConditionUpfrontPayment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, condition_type: str=None, id: str=None):  # noqa: E501
        """ConditionUpfrontPayment - a model defined in Swagger

        :param condition_type: The condition_type of this ConditionUpfrontPayment.  # noqa: E501
        :type condition_type: str
        :param id: The id of this ConditionUpfrontPayment.  # noqa: E501
        :type id: str
        """
        self.swagger_types = {
            'condition_type': str,
            'id': str
        }

        self.attribute_map = {
            'condition_type': 'conditionType',
            'id': 'id'
        }
        self._condition_type = condition_type
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'ConditionUpfrontPayment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The conditionUpfrontPayment of this ConditionUpfrontPayment.  # noqa: E501
        :rtype: ConditionUpfrontPayment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition_type(self) -> str:
        """Gets the condition_type of this ConditionUpfrontPayment.

        The specific subclass of condition, should match the schema name exactly  # noqa: E501

        :return: The condition_type of this ConditionUpfrontPayment.
        :rtype: str
        """
        return self._condition_type

    @condition_type.setter
    def condition_type(self, condition_type: str):
        """Sets the condition_type of this ConditionUpfrontPayment.

        The specific subclass of condition, should match the schema name exactly  # noqa: E501

        :param condition_type: The condition_type of this ConditionUpfrontPayment.
        :type condition_type: str
        """
        if condition_type is None:
            raise ValueError("Invalid value for `condition_type`, must not be `None`")  # noqa: E501

        self._condition_type = condition_type

    @property
    def id(self) -> str:
        """Gets the id of this ConditionUpfrontPayment.

        An identifier for this condition that can be used to refer to this condition  # noqa: E501

        :return: The id of this ConditionUpfrontPayment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ConditionUpfrontPayment.

        An identifier for this condition that can be used to refer to this condition  # noqa: E501

        :param id: The id of this ConditionUpfrontPayment.
        :type id: str
        """

        self._id = id
