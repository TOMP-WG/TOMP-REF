# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.asset_class import AssetClass  # noqa: F401,E501
from swagger_server.models.country import Country  # noqa: F401,E501
from swagger_server import util


class LicenseType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, asset_class: AssetClass=None, issuing_country: Country=None):  # noqa: E501
        """LicenseType - a model defined in Swagger

        :param asset_class: The asset_class of this LicenseType.  # noqa: E501
        :type asset_class: AssetClass
        :param issuing_country: The issuing_country of this LicenseType.  # noqa: E501
        :type issuing_country: Country
        """
        self.swagger_types = {
            'asset_class': AssetClass,
            'issuing_country': Country
        }

        self.attribute_map = {
            'asset_class': 'assetClass',
            'issuing_country': 'issuingCountry'
        }
        self._asset_class = asset_class
        self._issuing_country = issuing_country

    @classmethod
    def from_dict(cls, dikt) -> 'LicenseType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The licenseType of this LicenseType.  # noqa: E501
        :rtype: LicenseType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_class(self) -> AssetClass:
        """Gets the asset_class of this LicenseType.


        :return: The asset_class of this LicenseType.
        :rtype: AssetClass
        """
        return self._asset_class

    @asset_class.setter
    def asset_class(self, asset_class: AssetClass):
        """Sets the asset_class of this LicenseType.


        :param asset_class: The asset_class of this LicenseType.
        :type asset_class: AssetClass
        """
        if asset_class is None:
            raise ValueError("Invalid value for `asset_class`, must not be `None`")  # noqa: E501

        self._asset_class = asset_class

    @property
    def issuing_country(self) -> Country:
        """Gets the issuing_country of this LicenseType.


        :return: The issuing_country of this LicenseType.
        :rtype: Country
        """
        return self._issuing_country

    @issuing_country.setter
    def issuing_country(self, issuing_country: Country):
        """Sets the issuing_country of this LicenseType.


        :param issuing_country: The issuing_country of this LicenseType.
        :type issuing_country: Country
        """

        self._issuing_country = issuing_country
