# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SystemCalendar(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, station_id: str=None, region_id: str=None, start_month: int=None, start_day: int=None, start_year: int=None, end_month: int=None, end_day: int=None, end_year: int=None):  # noqa: E501
        """SystemCalendar - a model defined in Swagger

        :param station_id: The station_id of this SystemCalendar.  # noqa: E501
        :type station_id: str
        :param region_id: The region_id of this SystemCalendar.  # noqa: E501
        :type region_id: str
        :param start_month: The start_month of this SystemCalendar.  # noqa: E501
        :type start_month: int
        :param start_day: The start_day of this SystemCalendar.  # noqa: E501
        :type start_day: int
        :param start_year: The start_year of this SystemCalendar.  # noqa: E501
        :type start_year: int
        :param end_month: The end_month of this SystemCalendar.  # noqa: E501
        :type end_month: int
        :param end_day: The end_day of this SystemCalendar.  # noqa: E501
        :type end_day: int
        :param end_year: The end_year of this SystemCalendar.  # noqa: E501
        :type end_year: int
        """
        self.swagger_types = {
            'station_id': str,
            'region_id': str,
            'start_month': int,
            'start_day': int,
            'start_year': int,
            'end_month': int,
            'end_day': int,
            'end_year': int
        }

        self.attribute_map = {
            'station_id': 'stationId',
            'region_id': 'regionId',
            'start_month': 'startMonth',
            'start_day': 'startDay',
            'start_year': 'startYear',
            'end_month': 'endMonth',
            'end_day': 'endDay',
            'end_year': 'endYear'
        }
        self._station_id = station_id
        self._region_id = region_id
        self._start_month = start_month
        self._start_day = start_day
        self._start_year = start_year
        self._end_month = end_month
        self._end_day = end_day
        self._end_year = end_year

    @classmethod
    def from_dict(cls, dikt) -> 'SystemCalendar':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The systemCalendar of this SystemCalendar.  # noqa: E501
        :rtype: SystemCalendar
        """
        return util.deserialize_model(dikt, cls)

    @property
    def station_id(self) -> str:
        """Gets the station_id of this SystemCalendar.

        If this parameter is present, it means that start and end prameters correspond to the opening and closing days of the station. (GET /operator/stations)  # noqa: E501

        :return: The station_id of this SystemCalendar.
        :rtype: str
        """
        return self._station_id

    @station_id.setter
    def station_id(self, station_id: str):
        """Sets the station_id of this SystemCalendar.

        If this parameter is present, it means that start and end prameters correspond to the opening and closing days of the station. (GET /operator/stations)  # noqa: E501

        :param station_id: The station_id of this SystemCalendar.
        :type station_id: str
        """

        self._station_id = station_id

    @property
    def region_id(self) -> str:
        """Gets the region_id of this SystemCalendar.

        If this parameter is present, it means that start and end prameters correspond to the opening and closing days for the region. (GET /operator/regions)  # noqa: E501

        :return: The region_id of this SystemCalendar.
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id: str):
        """Sets the region_id of this SystemCalendar.

        If this parameter is present, it means that start and end prameters correspond to the opening and closing days for the region. (GET /operator/regions)  # noqa: E501

        :param region_id: The region_id of this SystemCalendar.
        :type region_id: str
        """

        self._region_id = region_id

    @property
    def start_month(self) -> int:
        """Gets the start_month of this SystemCalendar.

        Starting month for the system operations (1-12)  # noqa: E501

        :return: The start_month of this SystemCalendar.
        :rtype: int
        """
        return self._start_month

    @start_month.setter
    def start_month(self, start_month: int):
        """Sets the start_month of this SystemCalendar.

        Starting month for the system operations (1-12)  # noqa: E501

        :param start_month: The start_month of this SystemCalendar.
        :type start_month: int
        """
        if start_month is None:
            raise ValueError("Invalid value for `start_month`, must not be `None`")  # noqa: E501

        self._start_month = start_month

    @property
    def start_day(self) -> int:
        """Gets the start_day of this SystemCalendar.

        Starting day for the system operations (1-31)  # noqa: E501

        :return: The start_day of this SystemCalendar.
        :rtype: int
        """
        return self._start_day

    @start_day.setter
    def start_day(self, start_day: int):
        """Sets the start_day of this SystemCalendar.

        Starting day for the system operations (1-31)  # noqa: E501

        :param start_day: The start_day of this SystemCalendar.
        :type start_day: int
        """
        if start_day is None:
            raise ValueError("Invalid value for `start_day`, must not be `None`")  # noqa: E501

        self._start_day = start_day

    @property
    def start_year(self) -> int:
        """Gets the start_year of this SystemCalendar.

        Starting year for the system operations  # noqa: E501

        :return: The start_year of this SystemCalendar.
        :rtype: int
        """
        return self._start_year

    @start_year.setter
    def start_year(self, start_year: int):
        """Sets the start_year of this SystemCalendar.

        Starting year for the system operations  # noqa: E501

        :param start_year: The start_year of this SystemCalendar.
        :type start_year: int
        """

        self._start_year = start_year

    @property
    def end_month(self) -> int:
        """Gets the end_month of this SystemCalendar.

        Ending month for the system operations (1-12)  # noqa: E501

        :return: The end_month of this SystemCalendar.
        :rtype: int
        """
        return self._end_month

    @end_month.setter
    def end_month(self, end_month: int):
        """Sets the end_month of this SystemCalendar.

        Ending month for the system operations (1-12)  # noqa: E501

        :param end_month: The end_month of this SystemCalendar.
        :type end_month: int
        """
        if end_month is None:
            raise ValueError("Invalid value for `end_month`, must not be `None`")  # noqa: E501

        self._end_month = end_month

    @property
    def end_day(self) -> int:
        """Gets the end_day of this SystemCalendar.

        Ending day for the system operations (1-31)  # noqa: E501

        :return: The end_day of this SystemCalendar.
        :rtype: int
        """
        return self._end_day

    @end_day.setter
    def end_day(self, end_day: int):
        """Sets the end_day of this SystemCalendar.

        Ending day for the system operations (1-31)  # noqa: E501

        :param end_day: The end_day of this SystemCalendar.
        :type end_day: int
        """
        if end_day is None:
            raise ValueError("Invalid value for `end_day`, must not be `None`")  # noqa: E501

        self._end_day = end_day

    @property
    def end_year(self) -> int:
        """Gets the end_year of this SystemCalendar.

        Ending year for the system operations  # noqa: E501

        :return: The end_year of this SystemCalendar.
        :rtype: int
        """
        return self._end_year

    @end_year.setter
    def end_year(self, end_year: int):
        """Sets the end_year of this SystemCalendar.

        Ending year for the system operations  # noqa: E501

        :param end_year: The end_year of this SystemCalendar.
        :type end_year: int
        """

        self._end_year = end_year
