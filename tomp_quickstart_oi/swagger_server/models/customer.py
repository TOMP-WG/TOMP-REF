# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.address import Address  # noqa: F401,E501
from swagger_server.models.card import Card  # noqa: F401,E501
from swagger_server.models.card_type import CardType  # noqa: F401,E501
from swagger_server.models.license import License  # noqa: F401,E501
from swagger_server.models.license_type import LicenseType  # noqa: F401,E501
from swagger_server.models.phone import Phone  # noqa: F401,E501
from swagger_server.models.requirements import Requirements  # noqa: F401,E501
from swagger_server.models.traveler import Traveler  # noqa: F401,E501
from swagger_server import util


class Customer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, is_validated: bool=None, age: int=None, reference_number: str=None, card_types: List[CardType]=None, license_types: List[LicenseType]=None, requirements: Requirements=None, known_identifier: str=None, known_identifier_provider: str=None, id: str=None, traveler_reference: str=None, initials: str=None, first_name: str=None, last_name: str=None, middle_name: str=None, prefix: str=None, postfix: str=None, phones: List[Phone]=None, email: str=None, birth_date: date=None, address: Address=None, photo: bytearray=None, cards: List[Card]=None, licenses: List[License]=None):  # noqa: E501
        """Customer - a model defined in Swagger

        :param is_validated: The is_validated of this Customer.  # noqa: E501
        :type is_validated: bool
        :param age: The age of this Customer.  # noqa: E501
        :type age: int
        :param reference_number: The reference_number of this Customer.  # noqa: E501
        :type reference_number: str
        :param card_types: The card_types of this Customer.  # noqa: E501
        :type card_types: List[CardType]
        :param license_types: The license_types of this Customer.  # noqa: E501
        :type license_types: List[LicenseType]
        :param requirements: The requirements of this Customer.  # noqa: E501
        :type requirements: Requirements
        :param known_identifier: The known_identifier of this Customer.  # noqa: E501
        :type known_identifier: str
        :param known_identifier_provider: The known_identifier_provider of this Customer.  # noqa: E501
        :type known_identifier_provider: str
        :param id: The id of this Customer.  # noqa: E501
        :type id: str
        :param traveler_reference: The traveler_reference of this Customer.  # noqa: E501
        :type traveler_reference: str
        :param initials: The initials of this Customer.  # noqa: E501
        :type initials: str
        :param first_name: The first_name of this Customer.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this Customer.  # noqa: E501
        :type last_name: str
        :param middle_name: The middle_name of this Customer.  # noqa: E501
        :type middle_name: str
        :param prefix: The prefix of this Customer.  # noqa: E501
        :type prefix: str
        :param postfix: The postfix of this Customer.  # noqa: E501
        :type postfix: str
        :param phones: The phones of this Customer.  # noqa: E501
        :type phones: List[Phone]
        :param email: The email of this Customer.  # noqa: E501
        :type email: str
        :param birth_date: The birth_date of this Customer.  # noqa: E501
        :type birth_date: date
        :param address: The address of this Customer.  # noqa: E501
        :type address: Address
        :param photo: The photo of this Customer.  # noqa: E501
        :type photo: bytearray
        :param cards: The cards of this Customer.  # noqa: E501
        :type cards: List[Card]
        :param licenses: The licenses of this Customer.  # noqa: E501
        :type licenses: List[License]
        """
        self.swagger_types = {
            'is_validated': bool,
            'age': int,
            'reference_number': str,
            'card_types': List[CardType],
            'license_types': List[LicenseType],
            'requirements': Requirements,
            'known_identifier': str,
            'known_identifier_provider': str,
            'id': str,
            'traveler_reference': str,
            'initials': str,
            'first_name': str,
            'last_name': str,
            'middle_name': str,
            'prefix': str,
            'postfix': str,
            'phones': List[Phone],
            'email': str,
            'birth_date': date,
            'address': Address,
            'photo': bytearray,
            'cards': List[Card],
            'licenses': List[License]
        }

        self.attribute_map = {
            'is_validated': 'isValidated',
            'age': 'age',
            'reference_number': 'referenceNumber',
            'card_types': 'cardTypes',
            'license_types': 'licenseTypes',
            'requirements': 'requirements',
            'known_identifier': 'knownIdentifier',
            'known_identifier_provider': 'knownIdentifierProvider',
            'id': 'id',
            'traveler_reference': 'travelerReference',
            'initials': 'initials',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'middle_name': 'middleName',
            'prefix': 'prefix',
            'postfix': 'postfix',
            'phones': 'phones',
            'email': 'email',
            'birth_date': 'birthDate',
            'address': 'address',
            'photo': 'photo',
            'cards': 'cards',
            'licenses': 'licenses'
        }
        self._is_validated = is_validated
        self._age = age
        self._reference_number = reference_number
        self._card_types = card_types
        self._license_types = license_types
        self._requirements = requirements
        self._known_identifier = known_identifier
        self._known_identifier_provider = known_identifier_provider
        self._id = id
        self._traveler_reference = traveler_reference
        self._initials = initials
        self._first_name = first_name
        self._last_name = last_name
        self._middle_name = middle_name
        self._prefix = prefix
        self._postfix = postfix
        self._phones = phones
        self._email = email
        self._birth_date = birth_date
        self._address = address
        self._photo = photo
        self._cards = cards
        self._licenses = licenses

    @classmethod
    def from_dict(cls, dikt) -> 'Customer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The customer of this Customer.  # noqa: E501
        :rtype: Customer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_validated(self) -> bool:
        """Gets the is_validated of this Customer.

        Whether this traveler's identity and properties have been verified by the MaaS provider  # noqa: E501

        :return: The is_validated of this Customer.
        :rtype: bool
        """
        return self._is_validated

    @is_validated.setter
    def is_validated(self, is_validated: bool):
        """Sets the is_validated of this Customer.

        Whether this traveler's identity and properties have been verified by the MaaS provider  # noqa: E501

        :param is_validated: The is_validated of this Customer.
        :type is_validated: bool
        """

        self._is_validated = is_validated

    @property
    def age(self) -> int:
        """Gets the age of this Customer.

        Age of the traveler, may be approximate  # noqa: E501

        :return: The age of this Customer.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age: int):
        """Sets the age of this Customer.

        Age of the traveler, may be approximate  # noqa: E501

        :param age: The age of this Customer.
        :type age: int
        """

        self._age = age

    @property
    def reference_number(self) -> str:
        """Gets the reference_number of this Customer.

        reference number of the traveler. This number could be used to refer to in the planning result.  # noqa: E501

        :return: The reference_number of this Customer.
        :rtype: str
        """
        return self._reference_number

    @reference_number.setter
    def reference_number(self, reference_number: str):
        """Sets the reference_number of this Customer.

        reference number of the traveler. This number could be used to refer to in the planning result.  # noqa: E501

        :param reference_number: The reference_number of this Customer.
        :type reference_number: str
        """

        self._reference_number = reference_number

    @property
    def card_types(self) -> List[CardType]:
        """Gets the card_types of this Customer.

        The kind of cards this traveler possesses  # noqa: E501

        :return: The card_types of this Customer.
        :rtype: List[CardType]
        """
        return self._card_types

    @card_types.setter
    def card_types(self, card_types: List[CardType]):
        """Sets the card_types of this Customer.

        The kind of cards this traveler possesses  # noqa: E501

        :param card_types: The card_types of this Customer.
        :type card_types: List[CardType]
        """

        self._card_types = card_types

    @property
    def license_types(self) -> List[LicenseType]:
        """Gets the license_types of this Customer.

        The kind of licenses this traveler possesses  # noqa: E501

        :return: The license_types of this Customer.
        :rtype: List[LicenseType]
        """
        return self._license_types

    @license_types.setter
    def license_types(self, license_types: List[LicenseType]):
        """Sets the license_types of this Customer.

        The kind of licenses this traveler possesses  # noqa: E501

        :param license_types: The license_types of this Customer.
        :type license_types: List[LicenseType]
        """

        self._license_types = license_types

    @property
    def requirements(self) -> Requirements:
        """Gets the requirements of this Customer.


        :return: The requirements of this Customer.
        :rtype: Requirements
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements: Requirements):
        """Sets the requirements of this Customer.


        :param requirements: The requirements of this Customer.
        :type requirements: Requirements
        """

        self._requirements = requirements

    @property
    def known_identifier(self) -> str:
        """Gets the known_identifier of this Customer.

        identifier for this traveler in the personal data store. This identifier can be used to get personal information from the provider specified in the \"knownIdentifierProvider\"  # noqa: E501

        :return: The known_identifier of this Customer.
        :rtype: str
        """
        return self._known_identifier

    @known_identifier.setter
    def known_identifier(self, known_identifier: str):
        """Sets the known_identifier of this Customer.

        identifier for this traveler in the personal data store. This identifier can be used to get personal information from the provider specified in the \"knownIdentifierProvider\"  # noqa: E501

        :param known_identifier: The known_identifier of this Customer.
        :type known_identifier: str
        """

        self._known_identifier = known_identifier

    @property
    def known_identifier_provider(self) -> str:
        """Gets the known_identifier_provider of this Customer.

        provider for personal information. Can be a URI or identifier.  # noqa: E501

        :return: The known_identifier_provider of this Customer.
        :rtype: str
        """
        return self._known_identifier_provider

    @known_identifier_provider.setter
    def known_identifier_provider(self, known_identifier_provider: str):
        """Sets the known_identifier_provider of this Customer.

        provider for personal information. Can be a URI or identifier.  # noqa: E501

        :param known_identifier_provider: The known_identifier_provider of this Customer.
        :type known_identifier_provider: str
        """

        self._known_identifier_provider = known_identifier_provider

    @property
    def id(self) -> str:
        """Gets the id of this Customer.

        The identifier MaaS uses to identify the customer  # noqa: E501

        :return: The id of this Customer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Customer.

        The identifier MaaS uses to identify the customer  # noqa: E501

        :param id: The id of this Customer.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def traveler_reference(self) -> str:
        """Gets the traveler_reference of this Customer.

        optional reference field to the travelers in the planning request.  # noqa: E501

        :return: The traveler_reference of this Customer.
        :rtype: str
        """
        return self._traveler_reference

    @traveler_reference.setter
    def traveler_reference(self, traveler_reference: str):
        """Sets the traveler_reference of this Customer.

        optional reference field to the travelers in the planning request.  # noqa: E501

        :param traveler_reference: The traveler_reference of this Customer.
        :type traveler_reference: str
        """

        self._traveler_reference = traveler_reference

    @property
    def initials(self) -> str:
        """Gets the initials of this Customer.


        :return: The initials of this Customer.
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials: str):
        """Sets the initials of this Customer.


        :param initials: The initials of this Customer.
        :type initials: str
        """

        self._initials = initials

    @property
    def first_name(self) -> str:
        """Gets the first_name of this Customer.

        First name of the customer  # noqa: E501

        :return: The first_name of this Customer.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this Customer.

        First name of the customer  # noqa: E501

        :param first_name: The first_name of this Customer.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this Customer.

        Last name of the customer  # noqa: E501

        :return: The last_name of this Customer.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this Customer.

        Last name of the customer  # noqa: E501

        :param last_name: The last_name of this Customer.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def middle_name(self) -> str:
        """Gets the middle_name of this Customer.

        Middle name of the customer  # noqa: E501

        :return: The middle_name of this Customer.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name: str):
        """Sets the middle_name of this Customer.

        Middle name of the customer  # noqa: E501

        :param middle_name: The middle_name of this Customer.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def prefix(self) -> str:
        """Gets the prefix of this Customer.

        prefix of the customer, like titles  # noqa: E501

        :return: The prefix of this Customer.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix: str):
        """Sets the prefix of this Customer.

        prefix of the customer, like titles  # noqa: E501

        :param prefix: The prefix of this Customer.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def postfix(self) -> str:
        """Gets the postfix of this Customer.

        postfix of the customer, like titles  # noqa: E501

        :return: The postfix of this Customer.
        :rtype: str
        """
        return self._postfix

    @postfix.setter
    def postfix(self, postfix: str):
        """Sets the postfix of this Customer.

        postfix of the customer, like titles  # noqa: E501

        :param postfix: The postfix of this Customer.
        :type postfix: str
        """

        self._postfix = postfix

    @property
    def phones(self) -> List[Phone]:
        """Gets the phones of this Customer.


        :return: The phones of this Customer.
        :rtype: List[Phone]
        """
        return self._phones

    @phones.setter
    def phones(self, phones: List[Phone]):
        """Sets the phones of this Customer.


        :param phones: The phones of this Customer.
        :type phones: List[Phone]
        """

        self._phones = phones

    @property
    def email(self) -> str:
        """Gets the email of this Customer.

        the email address of the customer  # noqa: E501

        :return: The email of this Customer.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Customer.

        the email address of the customer  # noqa: E501

        :param email: The email of this Customer.
        :type email: str
        """

        self._email = email

    @property
    def birth_date(self) -> date:
        """Gets the birth_date of this Customer.


        :return: The birth_date of this Customer.
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date: date):
        """Sets the birth_date of this Customer.


        :param birth_date: The birth_date of this Customer.
        :type birth_date: date
        """

        self._birth_date = birth_date

    @property
    def address(self) -> Address:
        """Gets the address of this Customer.


        :return: The address of this Customer.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address: Address):
        """Sets the address of this Customer.


        :param address: The address of this Customer.
        :type address: Address
        """

        self._address = address

    @property
    def photo(self) -> bytearray:
        """Gets the photo of this Customer.

        base64 encoded  # noqa: E501

        :return: The photo of this Customer.
        :rtype: bytearray
        """
        return self._photo

    @photo.setter
    def photo(self, photo: bytearray):
        """Sets the photo of this Customer.

        base64 encoded  # noqa: E501

        :param photo: The photo of this Customer.
        :type photo: bytearray
        """

        self._photo = photo

    @property
    def cards(self) -> List[Card]:
        """Gets the cards of this Customer.


        :return: The cards of this Customer.
        :rtype: List[Card]
        """
        return self._cards

    @cards.setter
    def cards(self, cards: List[Card]):
        """Sets the cards of this Customer.


        :param cards: The cards of this Customer.
        :type cards: List[Card]
        """

        self._cards = cards

    @property
    def licenses(self) -> List[License]:
        """Gets the licenses of this Customer.


        :return: The licenses of this Customer.
        :rtype: List[License]
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses: List[License]):
        """Sets the licenses of this Customer.


        :param licenses: The licenses of this Customer.
        :type licenses: List[License]
        """

        self._licenses = licenses
