# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.asset import Asset  # noqa: F401,E501
from swagger_server import util


class LegEvent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, time: datetime=None, event: str=None, comment: str=None, url: List[str]=None, asset: Asset=None):  # noqa: E501
        """LegEvent - a model defined in Swagger

        :param time: The time of this LegEvent.  # noqa: E501
        :type time: datetime
        :param event: The event of this LegEvent.  # noqa: E501
        :type event: str
        :param comment: The comment of this LegEvent.  # noqa: E501
        :type comment: str
        :param url: The url of this LegEvent.  # noqa: E501
        :type url: List[str]
        :param asset: The asset of this LegEvent.  # noqa: E501
        :type asset: Asset
        """
        self.swagger_types = {
            'time': datetime,
            'event': str,
            'comment': str,
            'url': List[str],
            'asset': Asset
        }

        self.attribute_map = {
            'time': 'time',
            'event': 'event',
            'comment': 'comment',
            'url': 'url',
            'asset': 'asset'
        }
        self._time = time
        self._event = event
        self._comment = comment
        self._url = url
        self._asset = asset

    @classmethod
    def from_dict(cls, dikt) -> 'LegEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The legEvent of this LegEvent.  # noqa: E501
        :rtype: LegEvent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def time(self) -> datetime:
        """Gets the time of this LegEvent.


        :return: The time of this LegEvent.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time: datetime):
        """Sets the time of this LegEvent.


        :param time: The time of this LegEvent.
        :type time: datetime
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def event(self) -> str:
        """Gets the event of this LegEvent.


        :return: The event of this LegEvent.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event: str):
        """Sets the event of this LegEvent.


        :param event: The event of this LegEvent.
        :type event: str
        """
        allowed_values = ["PREPARE", "ASSIGN_ASSET", "SET_IN_USE", "PAUSE", "START_FINISHING", "FINISH", "TIME_EXTEND", "TIME_POSTPONE", "CANCEL"]  # noqa: E501
        if event not in allowed_values:
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"
                .format(event, allowed_values)
            )

        self._event = event

    @property
    def comment(self) -> str:
        """Gets the comment of this LegEvent.

        free text, should match Content-Language  # noqa: E501

        :return: The comment of this LegEvent.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this LegEvent.

        free text, should match Content-Language  # noqa: E501

        :param comment: The comment of this LegEvent.
        :type comment: str
        """

        self._comment = comment

    @property
    def url(self) -> List[str]:
        """Gets the url of this LegEvent.

        urls to support the event e.g. pictures justifying the exit conditions  # noqa: E501

        :return: The url of this LegEvent.
        :rtype: List[str]
        """
        return self._url

    @url.setter
    def url(self, url: List[str]):
        """Sets the url of this LegEvent.

        urls to support the event e.g. pictures justifying the exit conditions  # noqa: E501

        :param url: The url of this LegEvent.
        :type url: List[str]
        """

        self._url = url

    @property
    def asset(self) -> Asset:
        """Gets the asset of this LegEvent.


        :return: The asset of this LegEvent.
        :rtype: Asset
        """
        return self._asset

    @asset.setter
    def asset(self, asset: Asset):
        """Sets the asset of this LegEvent.


        :param asset: The asset of this LegEvent.
        :type asset: Asset
        """

        self._asset = asset
