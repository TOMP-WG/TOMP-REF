/*
 * MaaS Lookup Directory
 * A lookup directory for TOs and MPs (TOMP API)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.model.Body;
import io.swagger.model.Error;
import io.swagger.model.MaasLocation;
import io.swagger.model.SearchCondition;
import io.swagger.model.ValidationRequest;
import io.swagger.model.ValidationResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
	private ApiClient apiClient;

	public DefaultApi() {
		this(Configuration.getDefaultApiClient());
	}

	public DefaultApi(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	/**
	 * Build call for locationsPost
	 * 
	 * @param body
	 *            (required)
	 * @param acceptLanguage
	 *            ISO 639-1 two letter language code (required)
	 * @param api
	 *            API description, can be TOMP or maybe other (specific/derived) API
	 *            definitions (required)
	 * @param apiVersion
	 *            Version of the API. (required)
	 * @param progressListener
	 *            Progress listener
	 * @param progressRequestListener
	 *            Progress request listener
	 * @return Call to execute
	 * @throws ApiException
	 *             If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call locationsPostCall(SearchCondition body, String acceptLanguage, String api,
			String apiVersion, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/locations";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		if (acceptLanguage != null)
			localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));
		if (api != null)
			localVarHeaderParams.put("Api", apiClient.parameterToString(api));
		if (apiVersion != null)
			localVarHeaderParams.put("Api-Version", apiClient.parameterToString(apiVersion));

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] {};
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call locationsPostValidateBeforeCall(SearchCondition body, String acceptLanguage,
			String api, String apiVersion, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'body' is set
		if (body == null) {
			throw new ApiException("Missing the required parameter 'body' when calling locationsPost(Async)");
		}
		// verify the required parameter 'acceptLanguage' is set
		if (acceptLanguage == null) {
			throw new ApiException("Missing the required parameter 'acceptLanguage' when calling locationsPost(Async)");
		}
		// verify the required parameter 'api' is set
		if (api == null) {
			throw new ApiException("Missing the required parameter 'api' when calling locationsPost(Async)");
		}
		// verify the required parameter 'apiVersion' is set
		if (apiVersion == null) {
			throw new ApiException("Missing the required parameter 'apiVersion' when calling locationsPost(Async)");
		}

		com.squareup.okhttp.Call call = locationsPostCall(body, acceptLanguage, api, apiVersion, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * 
	 * returns TOs based on the search conditions
	 * 
	 * @param body
	 *            (required)
	 * @param acceptLanguage
	 *            ISO 639-1 two letter language code (required)
	 * @param api
	 *            API description, can be TOMP or maybe other (specific/derived) API
	 *            definitions (required)
	 * @param apiVersion
	 *            Version of the API. (required)
	 * @return List&lt;MaasLocation&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public List<MaasLocation> locationsPost(SearchCondition body, String acceptLanguage, String api, String apiVersion)
			throws ApiException {
		ApiResponse<List<MaasLocation>> resp = locationsPostWithHttpInfo(body, acceptLanguage, api, apiVersion);
		return resp.getData();
	}

	/**
	 * 
	 * returns TOs based on the search conditions
	 * 
	 * @param body
	 *            (required)
	 * @param acceptLanguage
	 *            ISO 639-1 two letter language code (required)
	 * @param api
	 *            API description, can be TOMP or maybe other (specific/derived) API
	 *            definitions (required)
	 * @param apiVersion
	 *            Version of the API. (required)
	 * @return ApiResponse&lt;List&lt;MaasLocation&gt;&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ApiResponse<List<MaasLocation>> locationsPostWithHttpInfo(SearchCondition body, String acceptLanguage,
			String api, String apiVersion) throws ApiException {
		com.squareup.okhttp.Call call = locationsPostValidateBeforeCall(body, acceptLanguage, api, apiVersion, null,
				null);
		Type localVarReturnType = new TypeToken<List<MaasLocation>>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * (asynchronously) returns TOs based on the search conditions
	 * 
	 * @param body
	 *            (required)
	 * @param acceptLanguage
	 *            ISO 639-1 two letter language code (required)
	 * @param api
	 *            API description, can be TOMP or maybe other (specific/derived) API
	 *            definitions (required)
	 * @param apiVersion
	 *            Version of the API. (required)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call locationsPostAsync(SearchCondition body, String acceptLanguage, String api,
			String apiVersion, final ApiCallback<List<MaasLocation>> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = locationsPostValidateBeforeCall(body, acceptLanguage, api, apiVersion,
				progressListener, progressRequestListener);
		Type localVarReturnType = new TypeToken<List<MaasLocation>>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for registrationPost
	 * 
	 * @param acceptLanguage
	 *            ISO 639-1 two letter language code (required)
	 * @param api
	 *            API description, can be TOMP or maybe other (specific/derived) API
	 *            definitions (required)
	 * @param apiVersion
	 *            Version of the API. (required)
	 * @param body
	 *            (optional)
	 * @param progressListener
	 *            Progress listener
	 * @param progressRequestListener
	 *            Progress request listener
	 * @return Call to execute
	 * @throws ApiException
	 *             If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call registrationPostCall(String acceptLanguage, String api, String apiVersion,
			Body body, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/registration";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		if (acceptLanguage != null)
			localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));
		if (api != null)
			localVarHeaderParams.put("Api", apiClient.parameterToString(api));
		if (apiVersion != null)
			localVarHeaderParams.put("Api-Version", apiClient.parameterToString(apiVersion));

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] {};
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call registrationPostValidateBeforeCall(String acceptLanguage, String api,
			String apiVersion, Body body, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'acceptLanguage' is set
		if (acceptLanguage == null) {
			throw new ApiException(
					"Missing the required parameter 'acceptLanguage' when calling registrationPost(Async)");
		}
		// verify the required parameter 'api' is set
		if (api == null) {
			throw new ApiException("Missing the required parameter 'api' when calling registrationPost(Async)");
		}
		// verify the required parameter 'apiVersion' is set
		if (apiVersion == null) {
			throw new ApiException("Missing the required parameter 'apiVersion' when calling registrationPost(Async)");
		}

		com.squareup.okhttp.Call call = registrationPostCall(acceptLanguage, api, apiVersion, body, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * 
	 * registrate a TO
	 * 
	 * @param acceptLanguage
	 *            ISO 639-1 two letter language code (required)
	 * @param api
	 *            API description, can be TOMP or maybe other (specific/derived) API
	 *            definitions (required)
	 * @param apiVersion
	 *            Version of the API. (required)
	 * @param body
	 *            (optional)
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public void registrationPost(String acceptLanguage, String api, String apiVersion, Body body) throws ApiException {
		registrationPostWithHttpInfo(acceptLanguage, api, apiVersion, body);
	}

	/**
	 * 
	 * registrate a TO
	 * 
	 * @param acceptLanguage
	 *            ISO 639-1 two letter language code (required)
	 * @param api
	 *            API description, can be TOMP or maybe other (specific/derived) API
	 *            definitions (required)
	 * @param apiVersion
	 *            Version of the API. (required)
	 * @param body
	 *            (optional)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ApiResponse<Void> registrationPostWithHttpInfo(String acceptLanguage, String api, String apiVersion,
			Body body) throws ApiException {
		com.squareup.okhttp.Call call = registrationPostValidateBeforeCall(acceptLanguage, api, apiVersion, body, null,
				null);
		return apiClient.execute(call);
	}

	/**
	 * (asynchronously) registrate a TO
	 * 
	 * @param acceptLanguage
	 *            ISO 639-1 two letter language code (required)
	 * @param api
	 *            API description, can be TOMP or maybe other (specific/derived) API
	 *            definitions (required)
	 * @param apiVersion
	 *            Version of the API. (required)
	 * @param body
	 *            (optional)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call registrationPostAsync(String acceptLanguage, String api, String apiVersion,
			Body body, final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = registrationPostValidateBeforeCall(acceptLanguage, api, apiVersion, body,
				progressListener, progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for validationPost
	 * 
	 * @param body
	 *            (required)
	 * @param acceptLanguage
	 *            ISO 639-1 two letter language code (required)
	 * @param api
	 *            API description, can be TOMP or maybe other (specific/derived) API
	 *            definitions (required)
	 * @param apiVersion
	 *            Version of the API. (required)
	 * @param progressListener
	 *            Progress listener
	 * @param progressRequestListener
	 *            Progress request listener
	 * @return Call to execute
	 * @throws ApiException
	 *             If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call validationPostCall(ValidationRequest body, String acceptLanguage, String api,
			String apiVersion, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/validation";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		if (acceptLanguage != null)
			localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));
		if (api != null)
			localVarHeaderParams.put("Api", apiClient.parameterToString(api));
		if (apiVersion != null)
			localVarHeaderParams.put("Api-Version", apiClient.parameterToString(apiVersion));

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] {};
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call validationPostValidateBeforeCall(ValidationRequest body, String acceptLanguage,
			String api, String apiVersion, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'body' is set
		if (body == null) {
			throw new ApiException("Missing the required parameter 'body' when calling validationPost(Async)");
		}
		// verify the required parameter 'acceptLanguage' is set
		if (acceptLanguage == null) {
			throw new ApiException(
					"Missing the required parameter 'acceptLanguage' when calling validationPost(Async)");
		}
		// verify the required parameter 'api' is set
		if (api == null) {
			throw new ApiException("Missing the required parameter 'api' when calling validationPost(Async)");
		}
		// verify the required parameter 'apiVersion' is set
		if (apiVersion == null) {
			throw new ApiException("Missing the required parameter 'apiVersion' when calling validationPost(Async)");
		}

		com.squareup.okhttp.Call call = validationPostCall(body, acceptLanguage, api, apiVersion, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * 
	 * validates if the MaaS Operator is valid
	 * 
	 * @param body
	 *            (required)
	 * @param acceptLanguage
	 *            ISO 639-1 two letter language code (required)
	 * @param api
	 *            API description, can be TOMP or maybe other (specific/derived) API
	 *            definitions (required)
	 * @param apiVersion
	 *            Version of the API. (required)
	 * @return ValidationResponse
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ValidationResponse validationPost(ValidationRequest body, String acceptLanguage, String api,
			String apiVersion) throws ApiException {
		ApiResponse<ValidationResponse> resp = validationPostWithHttpInfo(body, acceptLanguage, api, apiVersion);
		return resp.getData();
	}

	/**
	 * 
	 * validates if the MaaS Operator is valid
	 * 
	 * @param body
	 *            (required)
	 * @param acceptLanguage
	 *            ISO 639-1 two letter language code (required)
	 * @param api
	 *            API description, can be TOMP or maybe other (specific/derived) API
	 *            definitions (required)
	 * @param apiVersion
	 *            Version of the API. (required)
	 * @return ApiResponse&lt;ValidationResponse&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ApiResponse<ValidationResponse> validationPostWithHttpInfo(ValidationRequest body, String acceptLanguage,
			String api, String apiVersion) throws ApiException {
		com.squareup.okhttp.Call call = validationPostValidateBeforeCall(body, acceptLanguage, api, apiVersion, null,
				null);
		Type localVarReturnType = new TypeToken<ValidationResponse>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * (asynchronously) validates if the MaaS Operator is valid
	 * 
	 * @param body
	 *            (required)
	 * @param acceptLanguage
	 *            ISO 639-1 two letter language code (required)
	 * @param api
	 *            API description, can be TOMP or maybe other (specific/derived) API
	 *            definitions (required)
	 * @param apiVersion
	 *            Version of the API. (required)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call validationPostAsync(ValidationRequest body, String acceptLanguage, String api,
			String apiVersion, final ApiCallback<ValidationResponse> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = validationPostValidateBeforeCall(body, acceptLanguage, api, apiVersion,
				progressListener, progressRequestListener);
		Type localVarReturnType = new TypeToken<ValidationResponse>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}
}
