# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.all_ofbooking_request_from import AllOfbookingRequestFrom  # noqa: F401,E501
from swagger_server.models.all_ofbooking_request_to import AllOfbookingRequestTo  # noqa: F401,E501
from swagger_server.models.all_ofbooking_request_customer import AllOfbookingRequestCustomer  # noqa: F401,E501
from swagger_server import util


class BookingRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, _from: AllOfbookingRequestFrom=None, callback_url: str=None, to: AllOfbookingRequestTo=None, customer: AllOfbookingRequestCustomer=None):  # noqa: E501
        """BookingRequest - a model defined in Swagger

        :param id: The id of this BookingRequest.  # noqa: E501
        :type id: str
        :param _from: The _from of this BookingRequest.  # noqa: E501
        :type _from: AllOfbookingRequestFrom
        :param callback_url: The callback_url of this BookingRequest.  # noqa: E501
        :type callback_url: str
        :param to: The to of this BookingRequest.  # noqa: E501
        :type to: AllOfbookingRequestTo
        :param customer: The customer of this BookingRequest.  # noqa: E501
        :type customer: AllOfbookingRequestCustomer
        """
        self.swagger_types = {
            'id': str,
            '_from': AllOfbookingRequestFrom,
            'callback_url': str,
            'to': AllOfbookingRequestTo,
            'customer': AllOfbookingRequestCustomer
        }

        self.attribute_map = {
            'id': 'id',
            '_from': 'from',
            'callback_url': 'callbackUrl',
            'to': 'to',
            'customer': 'customer'
        }
        self._id = id
        self.__from = _from
        self._callback_url = callback_url
        self._to = to
        self._customer = customer

    @classmethod
    def from_dict(cls, dikt) -> 'BookingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The bookingRequest of this BookingRequest.  # noqa: E501
        :rtype: BookingRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this BookingRequest.

        A unique identifier for the TO to know this booking by  # noqa: E501

        :return: The id of this BookingRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this BookingRequest.

        A unique identifier for the TO to know this booking by  # noqa: E501

        :param id: The id of this BookingRequest.
        :type id: str
        """

        self._id = id

    @property
    def _from(self) -> AllOfbookingRequestFrom:
        """Gets the _from of this BookingRequest.

        information about the origin, only to supply when requested in the conditionRequireBookingData  # noqa: E501

        :return: The _from of this BookingRequest.
        :rtype: AllOfbookingRequestFrom
        """
        return self.__from

    @_from.setter
    def _from(self, _from: AllOfbookingRequestFrom):
        """Sets the _from of this BookingRequest.

        information about the origin, only to supply when requested in the conditionRequireBookingData  # noqa: E501

        :param _from: The _from of this BookingRequest.
        :type _from: AllOfbookingRequestFrom
        """

        self.__from = _from

    @property
    def callback_url(self) -> str:
        """Gets the callback_url of this BookingRequest.

        The callback URL of the Maas Provider, to use as base url for callback, f.x. the POST legs/{id}/events and POST /bookings/{id}/events. Only to be provided when this deviates from standard or agreed URL.  # noqa: E501

        :return: The callback_url of this BookingRequest.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url: str):
        """Sets the callback_url of this BookingRequest.

        The callback URL of the Maas Provider, to use as base url for callback, f.x. the POST legs/{id}/events and POST /bookings/{id}/events. Only to be provided when this deviates from standard or agreed URL.  # noqa: E501

        :param callback_url: The callback_url of this BookingRequest.
        :type callback_url: str
        """

        self._callback_url = callback_url

    @property
    def to(self) -> AllOfbookingRequestTo:
        """Gets the to of this BookingRequest.

        information about the destination, only to supply when requested in the conditionRequireBookingData  # noqa: E501

        :return: The to of this BookingRequest.
        :rtype: AllOfbookingRequestTo
        """
        return self._to

    @to.setter
    def to(self, to: AllOfbookingRequestTo):
        """Sets the to of this BookingRequest.

        information about the destination, only to supply when requested in the conditionRequireBookingData  # noqa: E501

        :param to: The to of this BookingRequest.
        :type to: AllOfbookingRequestTo
        """

        self._to = to

    @property
    def customer(self) -> AllOfbookingRequestCustomer:
        """Gets the customer of this BookingRequest.

        The user that wants to make this booking, only to supply when requested in the conditionRequireBookingData  # noqa: E501

        :return: The customer of this BookingRequest.
        :rtype: AllOfbookingRequestCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer: AllOfbookingRequestCustomer):
        """Sets the customer of this BookingRequest.

        The user that wants to make this booking, only to supply when requested in the conditionRequireBookingData  # noqa: E501

        :param customer: The customer of this BookingRequest.
        :type customer: AllOfbookingRequestCustomer
        """

        self._customer = customer
