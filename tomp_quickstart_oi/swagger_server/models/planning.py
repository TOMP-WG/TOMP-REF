# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.booking import Booking  # noqa: F401,E501
from swagger_server import util


class Planning(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, valid_until: datetime=None, options: List[Booking]=None):  # noqa: E501
        """Planning - a model defined in Swagger

        :param valid_until: The valid_until of this Planning.  # noqa: E501
        :type valid_until: datetime
        :param options: The options of this Planning.  # noqa: E501
        :type options: List[Booking]
        """
        self.swagger_types = {
            'valid_until': datetime,
            'options': List[Booking]
        }

        self.attribute_map = {
            'valid_until': 'validUntil',
            'options': 'options'
        }
        self._valid_until = valid_until
        self._options = options

    @classmethod
    def from_dict(cls, dikt) -> 'Planning':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The planning of this Planning.  # noqa: E501
        :rtype: Planning
        """
        return util.deserialize_model(dikt, cls)

    @property
    def valid_until(self) -> datetime:
        """Gets the valid_until of this Planning.

        The time until which the presented options are (likely) available  # noqa: E501

        :return: The valid_until of this Planning.
        :rtype: datetime
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until: datetime):
        """Sets the valid_until of this Planning.

        The time until which the presented options are (likely) available  # noqa: E501

        :param valid_until: The valid_until of this Planning.
        :type valid_until: datetime
        """
        if valid_until is None:
            raise ValueError("Invalid value for `valid_until`, must not be `None`")  # noqa: E501

        self._valid_until = valid_until

    @property
    def options(self) -> List[Booking]:
        """Gets the options of this Planning.


        :return: The options of this Planning.
        :rtype: List[Booking]
        """
        return self._options

    @options.setter
    def options(self, options: List[Booking]):
        """Sets the options of this Planning.


        :param options: The options of this Planning.
        :type options: List[Booking]
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")  # noqa: E501

        self._options = options
