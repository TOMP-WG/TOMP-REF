# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Suboperator(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, maas_id: str=None, description: str=None, contact: str=None):  # noqa: E501
        """Suboperator - a model defined in Swagger

        :param name: The name of this Suboperator.  # noqa: E501
        :type name: str
        :param maas_id: The maas_id of this Suboperator.  # noqa: E501
        :type maas_id: str
        :param description: The description of this Suboperator.  # noqa: E501
        :type description: str
        :param contact: The contact of this Suboperator.  # noqa: E501
        :type contact: str
        """
        self.swagger_types = {
            'name': str,
            'maas_id': str,
            'description': str,
            'contact': str
        }

        self.attribute_map = {
            'name': 'name',
            'maas_id': 'maasId',
            'description': 'description',
            'contact': 'contact'
        }
        self._name = name
        self._maas_id = maas_id
        self._description = description
        self._contact = contact

    @classmethod
    def from_dict(cls, dikt) -> 'Suboperator':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The suboperator of this Suboperator.  # noqa: E501
        :rtype: Suboperator
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Suboperator.

        Name of the operator, could match Content-Language  # noqa: E501

        :return: The name of this Suboperator.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Suboperator.

        Name of the operator, could match Content-Language  # noqa: E501

        :param name: The name of this Suboperator.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def maas_id(self) -> str:
        """Gets the maas_id of this Suboperator.

        the maasId from the operator  # noqa: E501

        :return: The maas_id of this Suboperator.
        :rtype: str
        """
        return self._maas_id

    @maas_id.setter
    def maas_id(self, maas_id: str):
        """Sets the maas_id of this Suboperator.

        the maasId from the operator  # noqa: E501

        :param maas_id: The maas_id of this Suboperator.
        :type maas_id: str
        """

        self._maas_id = maas_id

    @property
    def description(self) -> str:
        """Gets the description of this Suboperator.

        short description of the operator, should match Content-Language  # noqa: E501

        :return: The description of this Suboperator.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Suboperator.

        short description of the operator, should match Content-Language  # noqa: E501

        :param description: The description of this Suboperator.
        :type description: str
        """

        self._description = description

    @property
    def contact(self) -> str:
        """Gets the contact of this Suboperator.

        contact information, should match Content-Language  # noqa: E501

        :return: The contact of this Suboperator.
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact: str):
        """Sets the contact of this Suboperator.

        contact information, should match Content-Language  # noqa: E501

        :param contact: The contact of this Suboperator.
        :type contact: str
        """

        self._contact = contact
