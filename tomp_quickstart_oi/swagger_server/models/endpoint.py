# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Endpoint(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, method: str=None, path: str=None, event_type: str=None, status: str=None, supports_paging: bool=False, max_page_size: float=None):  # noqa: E501
        """Endpoint - a model defined in Swagger

        :param method: The method of this Endpoint.  # noqa: E501
        :type method: str
        :param path: The path of this Endpoint.  # noqa: E501
        :type path: str
        :param event_type: The event_type of this Endpoint.  # noqa: E501
        :type event_type: str
        :param status: The status of this Endpoint.  # noqa: E501
        :type status: str
        :param supports_paging: The supports_paging of this Endpoint.  # noqa: E501
        :type supports_paging: bool
        :param max_page_size: The max_page_size of this Endpoint.  # noqa: E501
        :type max_page_size: float
        """
        self.swagger_types = {
            'method': str,
            'path': str,
            'event_type': str,
            'status': str,
            'supports_paging': bool,
            'max_page_size': float
        }

        self.attribute_map = {
            'method': 'method',
            'path': 'path',
            'event_type': 'eventType',
            'status': 'status',
            'supports_paging': 'supportsPaging',
            'max_page_size': 'maxPageSize'
        }
        self._method = method
        self._path = path
        self._event_type = event_type
        self._status = status
        self._supports_paging = supports_paging
        self._max_page_size = max_page_size

    @classmethod
    def from_dict(cls, dikt) -> 'Endpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The endpoint of this Endpoint.  # noqa: E501
        :rtype: Endpoint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self) -> str:
        """Gets the method of this Endpoint.


        :return: The method of this Endpoint.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method: str):
        """Sets the method of this Endpoint.


        :param method: The method of this Endpoint.
        :type method: str
        """
        allowed_values = ["POST", "PUT", "GET", "DELETE", "PATCH"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def path(self) -> str:
        """Gets the path of this Endpoint.

        the exact path of the endpoint, starting after the base URL  # noqa: E501

        :return: The path of this Endpoint.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this Endpoint.

        the exact path of the endpoint, starting after the base URL  # noqa: E501

        :param path: The path of this Endpoint.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def event_type(self) -> str:
        """Gets the event_type of this Endpoint.

        in case the path is ending in /events, the event type/operator enum should be added here.  # noqa: E501

        :return: The event_type of this Endpoint.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type: str):
        """Sets the event_type of this Endpoint.

        in case the path is ending in /events, the event type/operator enum should be added here.  # noqa: E501

        :param event_type: The event_type of this Endpoint.
        :type event_type: str
        """
        allowed_values = ["PREPARE", "ASSIGN_ASSET", "SET_IN_USE", "PAUSE", "START_FINISHING", "FINISH", "ISSUE", "CANCEL", "EXPIRE", "DENY", "COMMIT"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def status(self) -> str:
        """Gets the status of this Endpoint.


        :return: The status of this Endpoint.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Endpoint.


        :param status: The status of this Endpoint.
        :type status: str
        """
        allowed_values = ["NOT_IMPLEMENTED", "DIALECT", "IMPLEMENTED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def supports_paging(self) -> bool:
        """Gets the supports_paging of this Endpoint.

        does this endpoint support paging? In that case this endpoint can be accessed using query parameters offset=x and limit=y. Only allowed at endpoints that have specified these query parameters.  # noqa: E501

        :return: The supports_paging of this Endpoint.
        :rtype: bool
        """
        return self._supports_paging

    @supports_paging.setter
    def supports_paging(self, supports_paging: bool):
        """Sets the supports_paging of this Endpoint.

        does this endpoint support paging? In that case this endpoint can be accessed using query parameters offset=x and limit=y. Only allowed at endpoints that have specified these query parameters.  # noqa: E501

        :param supports_paging: The supports_paging of this Endpoint.
        :type supports_paging: bool
        """

        self._supports_paging = supports_paging

    @property
    def max_page_size(self) -> float:
        """Gets the max_page_size of this Endpoint.

        the maximum size of the pages (only valid when supportsPaging=true). If the limit-parameter of the request is above this amount, a http code 400 will be returned.  # noqa: E501

        :return: The max_page_size of this Endpoint.
        :rtype: float
        """
        return self._max_page_size

    @max_page_size.setter
    def max_page_size(self, max_page_size: float):
        """Sets the max_page_size of this Endpoint.

        the maximum size of the pages (only valid when supportsPaging=true). If the limit-parameter of the request is above this amount, a http code 400 will be returned.  # noqa: E501

        :param max_page_size: The max_page_size of this Endpoint.
        :type max_page_size: float
        """

        self._max_page_size = max_page_size
