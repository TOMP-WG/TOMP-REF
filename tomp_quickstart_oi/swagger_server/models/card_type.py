# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.asset_class import AssetClass  # noqa: F401,E501
from swagger_server import util


class CardType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, sub_type: str=None, asset_class: AssetClass=None, acceptors: List[str]=None):  # noqa: E501
        """CardType - a model defined in Swagger

        :param type: The type of this CardType.  # noqa: E501
        :type type: str
        :param sub_type: The sub_type of this CardType.  # noqa: E501
        :type sub_type: str
        :param asset_class: The asset_class of this CardType.  # noqa: E501
        :type asset_class: AssetClass
        :param acceptors: The acceptors of this CardType.  # noqa: E501
        :type acceptors: List[str]
        """
        self.swagger_types = {
            'type': str,
            'sub_type': str,
            'asset_class': AssetClass,
            'acceptors': List[str]
        }

        self.attribute_map = {
            'type': 'type',
            'sub_type': 'subType',
            'asset_class': 'assetClass',
            'acceptors': 'acceptors'
        }
        self._type = type
        self._sub_type = sub_type
        self._asset_class = asset_class
        self._acceptors = acceptors

    @classmethod
    def from_dict(cls, dikt) -> 'CardType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The cardType of this CardType.  # noqa: E501
        :rtype: CardType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this CardType.

        The broad category of card  # noqa: E501

        :return: The type of this CardType.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this CardType.

        The broad category of card  # noqa: E501

        :param type: The type of this CardType.
        :type type: str
        """
        allowed_values = ["ID", "DISCOUNT", "TRAVEL", "BANK", "CREDIT", "PASSPORT", "OTHER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def sub_type(self) -> str:
        """Gets the sub_type of this CardType.

        For use in case of OTHER. Can be used in bilateral agreements.  # noqa: E501

        :return: The sub_type of this CardType.
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type: str):
        """Sets the sub_type of this CardType.

        For use in case of OTHER. Can be used in bilateral agreements.  # noqa: E501

        :param sub_type: The sub_type of this CardType.
        :type sub_type: str
        """

        self._sub_type = sub_type

    @property
    def asset_class(self) -> AssetClass:
        """Gets the asset_class of this CardType.


        :return: The asset_class of this CardType.
        :rtype: AssetClass
        """
        return self._asset_class

    @asset_class.setter
    def asset_class(self, asset_class: AssetClass):
        """Sets the asset_class of this CardType.


        :param asset_class: The asset_class of this CardType.
        :type asset_class: AssetClass
        """

        self._asset_class = asset_class

    @property
    def acceptors(self) -> List[str]:
        """Gets the acceptors of this CardType.

        references to accepting parties, only if applicable  # noqa: E501

        :return: The acceptors of this CardType.
        :rtype: List[str]
        """
        return self._acceptors

    @acceptors.setter
    def acceptors(self, acceptors: List[str]):
        """Sets the acceptors of this CardType.

        references to accepting parties, only if applicable  # noqa: E501

        :param acceptors: The acceptors of this CardType.
        :type acceptors: List[str]
        """

        self._acceptors = acceptors
