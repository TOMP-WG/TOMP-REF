# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ConfirmationRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, asset_type_id: str=None):  # noqa: E501
        """ConfirmationRequest - a model defined in Swagger

        :param type: The type of this ConfirmationRequest.  # noqa: E501
        :type type: str
        :param asset_type_id: The asset_type_id of this ConfirmationRequest.  # noqa: E501
        :type asset_type_id: str
        """
        self.swagger_types = {
            'type': str,
            'asset_type_id': str
        }

        self.attribute_map = {
            'type': 'type',
            'asset_type_id': 'assetTypeId'
        }
        self._type = type
        self._asset_type_id = asset_type_id

    @classmethod
    def from_dict(cls, dikt) -> 'ConfirmationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The confirmationRequest of this ConfirmationRequest.  # noqa: E501
        :rtype: ConfirmationRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this ConfirmationRequest.


        :return: The type of this ConfirmationRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ConfirmationRequest.


        :param type: The type of this ConfirmationRequest.
        :type type: str
        """
        allowed_values = ["REPLACE_ASSET", "START_LEG"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def asset_type_id(self) -> str:
        """Gets the asset_type_id of this ConfirmationRequest.

        reference to the assetType in /operator/available-assets, this property can be set when replacing an asset (for another type). In case of a succesfull replacement, the /legs/{id}/events - ASSIGN_ASSET should be send to the MP to inform a change of asset has been made.  # noqa: E501

        :return: The asset_type_id of this ConfirmationRequest.
        :rtype: str
        """
        return self._asset_type_id

    @asset_type_id.setter
    def asset_type_id(self, asset_type_id: str):
        """Sets the asset_type_id of this ConfirmationRequest.

        reference to the assetType in /operator/available-assets, this property can be set when replacing an asset (for another type). In case of a succesfull replacement, the /legs/{id}/events - ASSIGN_ASSET should be send to the MP to inform a change of asset has been made.  # noqa: E501

        :param asset_type_id: The asset_type_id of this ConfirmationRequest.
        :type asset_type_id: str
        """

        self._asset_type_id = asset_type_id
