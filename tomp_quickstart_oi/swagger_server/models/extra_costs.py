# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.amount_of_money import AmountOfMoney  # noqa: F401,E501
from swagger_server.models.bank_account import BankAccount  # noqa: F401,E501
from swagger_server.models.country import Country  # noqa: F401,E501
from swagger_server.models.journal_category import JournalCategory  # noqa: F401,E501
from swagger_server import util


class ExtraCosts(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, amount: float=None, amount_ex_vat: float=None, currency_code: str=None, vat_rate: float=None, vat_country_code: Country=None, category: JournalCategory=None, description: str=None, number: float=None, number_type: str=None, account: BankAccount=None, meta: Dict=None):  # noqa: E501
        """ExtraCosts - a model defined in Swagger

        :param amount: The amount of this ExtraCosts.  # noqa: E501
        :type amount: float
        :param amount_ex_vat: The amount_ex_vat of this ExtraCosts.  # noqa: E501
        :type amount_ex_vat: float
        :param currency_code: The currency_code of this ExtraCosts.  # noqa: E501
        :type currency_code: str
        :param vat_rate: The vat_rate of this ExtraCosts.  # noqa: E501
        :type vat_rate: float
        :param vat_country_code: The vat_country_code of this ExtraCosts.  # noqa: E501
        :type vat_country_code: Country
        :param category: The category of this ExtraCosts.  # noqa: E501
        :type category: JournalCategory
        :param description: The description of this ExtraCosts.  # noqa: E501
        :type description: str
        :param number: The number of this ExtraCosts.  # noqa: E501
        :type number: float
        :param number_type: The number_type of this ExtraCosts.  # noqa: E501
        :type number_type: str
        :param account: The account of this ExtraCosts.  # noqa: E501
        :type account: BankAccount
        :param meta: The meta of this ExtraCosts.  # noqa: E501
        :type meta: Dict
        """
        self.swagger_types = {
            'amount': float,
            'amount_ex_vat': float,
            'currency_code': str,
            'vat_rate': float,
            'vat_country_code': Country,
            'category': JournalCategory,
            'description': str,
            'number': float,
            'number_type': str,
            'account': BankAccount,
            'meta': Dict
        }

        self.attribute_map = {
            'amount': 'amount',
            'amount_ex_vat': 'amountExVat',
            'currency_code': 'currencyCode',
            'vat_rate': 'vatRate',
            'vat_country_code': 'vatCountryCode',
            'category': 'category',
            'description': 'description',
            'number': 'number',
            'number_type': 'numberType',
            'account': 'account',
            'meta': 'meta'
        }
        self._amount = amount
        self._amount_ex_vat = amount_ex_vat
        self._currency_code = currency_code
        self._vat_rate = vat_rate
        self._vat_country_code = vat_country_code
        self._category = category
        self._description = description
        self._number = number
        self._number_type = number_type
        self._account = account
        self._meta = meta

    @classmethod
    def from_dict(cls, dikt) -> 'ExtraCosts':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The extraCosts of this ExtraCosts.  # noqa: E501
        :rtype: ExtraCosts
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self) -> float:
        """Gets the amount of this ExtraCosts.

        This should be in the base unit as defined by the ISO 4217 currency code with the appropriate number of decimal places and omitting the currency symbol. e.g. if the price is in US Dollars the price would be 9.95. This is inclusive VAT  # noqa: E501

        :return: The amount of this ExtraCosts.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount: float):
        """Sets the amount of this ExtraCosts.

        This should be in the base unit as defined by the ISO 4217 currency code with the appropriate number of decimal places and omitting the currency symbol. e.g. if the price is in US Dollars the price would be 9.95. This is inclusive VAT  # noqa: E501

        :param amount: The amount of this ExtraCosts.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def amount_ex_vat(self) -> float:
        """Gets the amount_ex_vat of this ExtraCosts.


        :return: The amount_ex_vat of this ExtraCosts.
        :rtype: float
        """
        return self._amount_ex_vat

    @amount_ex_vat.setter
    def amount_ex_vat(self, amount_ex_vat: float):
        """Sets the amount_ex_vat of this ExtraCosts.


        :param amount_ex_vat: The amount_ex_vat of this ExtraCosts.
        :type amount_ex_vat: float
        """

        self._amount_ex_vat = amount_ex_vat

    @property
    def currency_code(self) -> str:
        """Gets the currency_code of this ExtraCosts.

        ISO 4217 currency code  # noqa: E501

        :return: The currency_code of this ExtraCosts.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code: str):
        """Sets the currency_code of this ExtraCosts.

        ISO 4217 currency code  # noqa: E501

        :param currency_code: The currency_code of this ExtraCosts.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def vat_rate(self) -> float:
        """Gets the vat_rate of this ExtraCosts.

        value added tax rate (percentage of amount)  # noqa: E501

        :return: The vat_rate of this ExtraCosts.
        :rtype: float
        """
        return self._vat_rate

    @vat_rate.setter
    def vat_rate(self, vat_rate: float):
        """Sets the vat_rate of this ExtraCosts.

        value added tax rate (percentage of amount)  # noqa: E501

        :param vat_rate: The vat_rate of this ExtraCosts.
        :type vat_rate: float
        """

        self._vat_rate = vat_rate

    @property
    def vat_country_code(self) -> Country:
        """Gets the vat_country_code of this ExtraCosts.


        :return: The vat_country_code of this ExtraCosts.
        :rtype: Country
        """
        return self._vat_country_code

    @vat_country_code.setter
    def vat_country_code(self, vat_country_code: Country):
        """Sets the vat_country_code of this ExtraCosts.


        :param vat_country_code: The vat_country_code of this ExtraCosts.
        :type vat_country_code: Country
        """

        self._vat_country_code = vat_country_code

    @property
    def category(self) -> JournalCategory:
        """Gets the category of this ExtraCosts.


        :return: The category of this ExtraCosts.
        :rtype: JournalCategory
        """
        return self._category

    @category.setter
    def category(self, category: JournalCategory):
        """Sets the category of this ExtraCosts.


        :param category: The category of this ExtraCosts.
        :type category: JournalCategory
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def description(self) -> str:
        """Gets the description of this ExtraCosts.

        free text to describe the extra costs. Mandatory in case of 'OTHER', should match Content-Language  # noqa: E501

        :return: The description of this ExtraCosts.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ExtraCosts.

        free text to describe the extra costs. Mandatory in case of 'OTHER', should match Content-Language  # noqa: E501

        :param description: The description of this ExtraCosts.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def number(self) -> float:
        """Gets the number of this ExtraCosts.

        e.g. number of litres, number of kilowatthour, etc  # noqa: E501

        :return: The number of this ExtraCosts.
        :rtype: float
        """
        return self._number

    @number.setter
    def number(self, number: float):
        """Sets the number of this ExtraCosts.

        e.g. number of litres, number of kilowatthour, etc  # noqa: E501

        :param number: The number of this ExtraCosts.
        :type number: float
        """

        self._number = number

    @property
    def number_type(self) -> str:
        """Gets the number_type of this ExtraCosts.


        :return: The number_type of this ExtraCosts.
        :rtype: str
        """
        return self._number_type

    @number_type.setter
    def number_type(self, number_type: str):
        """Sets the number_type of this ExtraCosts.


        :param number_type: The number_type of this ExtraCosts.
        :type number_type: str
        """
        allowed_values = ["LITER", "KILOWATTHOUR", "CO2_COMPENSATION", "OTHER"]  # noqa: E501
        if number_type not in allowed_values:
            raise ValueError(
                "Invalid value for `number_type` ({0}), must be one of {1}"
                .format(number_type, allowed_values)
            )

        self._number_type = number_type

    @property
    def account(self) -> BankAccount:
        """Gets the account of this ExtraCosts.


        :return: The account of this ExtraCosts.
        :rtype: BankAccount
        """
        return self._account

    @account.setter
    def account(self, account: BankAccount):
        """Sets the account of this ExtraCosts.


        :param account: The account of this ExtraCosts.
        :type account: BankAccount
        """

        self._account = account

    @property
    def meta(self) -> Dict:
        """Gets the meta of this ExtraCosts.

        Arbitrary metadata that a TO can add, like voucher codes  # noqa: E501

        :return: The meta of this ExtraCosts.
        :rtype: Dict
        """
        return self._meta

    @meta.setter
    def meta(self, meta: Dict):
        """Sets the meta of this ExtraCosts.

        Arbitrary metadata that a TO can add, like voucher codes  # noqa: E501

        :param meta: The meta of this ExtraCosts.
        :type meta: Dict
        """

        self._meta = meta
