# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.address import Address  # noqa: F401,E501
from swagger_server.models.card import Card  # noqa: F401,E501
from swagger_server.models.customer import Customer  # noqa: F401,E501
from swagger_server.models.license import License  # noqa: F401,E501
from swagger_server.models.phone import Phone  # noqa: F401,E501
from swagger_server import util


class AllOfbookingRequestCustomer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, traveler_reference: str=None, initials: str=None, first_name: str=None, last_name: str=None, middle_name: str=None, prefix: str=None, postfix: str=None, phones: List[Phone]=None, email: str=None, birth_date: date=None, address: Address=None, photo: bytearray=None, cards: List[Card]=None, licenses: List[License]=None):  # noqa: E501
        """AllOfbookingRequestCustomer - a model defined in Swagger

        :param id: The id of this AllOfbookingRequestCustomer.  # noqa: E501
        :type id: str
        :param traveler_reference: The traveler_reference of this AllOfbookingRequestCustomer.  # noqa: E501
        :type traveler_reference: str
        :param initials: The initials of this AllOfbookingRequestCustomer.  # noqa: E501
        :type initials: str
        :param first_name: The first_name of this AllOfbookingRequestCustomer.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this AllOfbookingRequestCustomer.  # noqa: E501
        :type last_name: str
        :param middle_name: The middle_name of this AllOfbookingRequestCustomer.  # noqa: E501
        :type middle_name: str
        :param prefix: The prefix of this AllOfbookingRequestCustomer.  # noqa: E501
        :type prefix: str
        :param postfix: The postfix of this AllOfbookingRequestCustomer.  # noqa: E501
        :type postfix: str
        :param phones: The phones of this AllOfbookingRequestCustomer.  # noqa: E501
        :type phones: List[Phone]
        :param email: The email of this AllOfbookingRequestCustomer.  # noqa: E501
        :type email: str
        :param birth_date: The birth_date of this AllOfbookingRequestCustomer.  # noqa: E501
        :type birth_date: date
        :param address: The address of this AllOfbookingRequestCustomer.  # noqa: E501
        :type address: Address
        :param photo: The photo of this AllOfbookingRequestCustomer.  # noqa: E501
        :type photo: bytearray
        :param cards: The cards of this AllOfbookingRequestCustomer.  # noqa: E501
        :type cards: List[Card]
        :param licenses: The licenses of this AllOfbookingRequestCustomer.  # noqa: E501
        :type licenses: List[License]
        """
        self.swagger_types = {
            'id': str,
            'traveler_reference': str,
            'initials': str,
            'first_name': str,
            'last_name': str,
            'middle_name': str,
            'prefix': str,
            'postfix': str,
            'phones': List[Phone],
            'email': str,
            'birth_date': date,
            'address': Address,
            'photo': bytearray,
            'cards': List[Card],
            'licenses': List[License]
        }

        self.attribute_map = {
            'id': 'id',
            'traveler_reference': 'travelerReference',
            'initials': 'initials',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'middle_name': 'middleName',
            'prefix': 'prefix',
            'postfix': 'postfix',
            'phones': 'phones',
            'email': 'email',
            'birth_date': 'birthDate',
            'address': 'address',
            'photo': 'photo',
            'cards': 'cards',
            'licenses': 'licenses'
        }
        self._id = id
        self._traveler_reference = traveler_reference
        self._initials = initials
        self._first_name = first_name
        self._last_name = last_name
        self._middle_name = middle_name
        self._prefix = prefix
        self._postfix = postfix
        self._phones = phones
        self._email = email
        self._birth_date = birth_date
        self._address = address
        self._photo = photo
        self._cards = cards
        self._licenses = licenses

    @classmethod
    def from_dict(cls, dikt) -> 'AllOfbookingRequestCustomer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AllOfbookingRequestCustomer of this AllOfbookingRequestCustomer.  # noqa: E501
        :rtype: AllOfbookingRequestCustomer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this AllOfbookingRequestCustomer.

        The identifier MaaS uses to identify the customer  # noqa: E501

        :return: The id of this AllOfbookingRequestCustomer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this AllOfbookingRequestCustomer.

        The identifier MaaS uses to identify the customer  # noqa: E501

        :param id: The id of this AllOfbookingRequestCustomer.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def traveler_reference(self) -> str:
        """Gets the traveler_reference of this AllOfbookingRequestCustomer.

        optional reference field to the travelers in the planning request.  # noqa: E501

        :return: The traveler_reference of this AllOfbookingRequestCustomer.
        :rtype: str
        """
        return self._traveler_reference

    @traveler_reference.setter
    def traveler_reference(self, traveler_reference: str):
        """Sets the traveler_reference of this AllOfbookingRequestCustomer.

        optional reference field to the travelers in the planning request.  # noqa: E501

        :param traveler_reference: The traveler_reference of this AllOfbookingRequestCustomer.
        :type traveler_reference: str
        """

        self._traveler_reference = traveler_reference

    @property
    def initials(self) -> str:
        """Gets the initials of this AllOfbookingRequestCustomer.


        :return: The initials of this AllOfbookingRequestCustomer.
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials: str):
        """Sets the initials of this AllOfbookingRequestCustomer.


        :param initials: The initials of this AllOfbookingRequestCustomer.
        :type initials: str
        """

        self._initials = initials

    @property
    def first_name(self) -> str:
        """Gets the first_name of this AllOfbookingRequestCustomer.

        First name of the customer  # noqa: E501

        :return: The first_name of this AllOfbookingRequestCustomer.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this AllOfbookingRequestCustomer.

        First name of the customer  # noqa: E501

        :param first_name: The first_name of this AllOfbookingRequestCustomer.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this AllOfbookingRequestCustomer.

        Last name of the customer  # noqa: E501

        :return: The last_name of this AllOfbookingRequestCustomer.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this AllOfbookingRequestCustomer.

        Last name of the customer  # noqa: E501

        :param last_name: The last_name of this AllOfbookingRequestCustomer.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def middle_name(self) -> str:
        """Gets the middle_name of this AllOfbookingRequestCustomer.

        Middle name of the customer  # noqa: E501

        :return: The middle_name of this AllOfbookingRequestCustomer.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name: str):
        """Sets the middle_name of this AllOfbookingRequestCustomer.

        Middle name of the customer  # noqa: E501

        :param middle_name: The middle_name of this AllOfbookingRequestCustomer.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def prefix(self) -> str:
        """Gets the prefix of this AllOfbookingRequestCustomer.

        prefix of the customer, like titles  # noqa: E501

        :return: The prefix of this AllOfbookingRequestCustomer.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix: str):
        """Sets the prefix of this AllOfbookingRequestCustomer.

        prefix of the customer, like titles  # noqa: E501

        :param prefix: The prefix of this AllOfbookingRequestCustomer.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def postfix(self) -> str:
        """Gets the postfix of this AllOfbookingRequestCustomer.

        postfix of the customer, like titles  # noqa: E501

        :return: The postfix of this AllOfbookingRequestCustomer.
        :rtype: str
        """
        return self._postfix

    @postfix.setter
    def postfix(self, postfix: str):
        """Sets the postfix of this AllOfbookingRequestCustomer.

        postfix of the customer, like titles  # noqa: E501

        :param postfix: The postfix of this AllOfbookingRequestCustomer.
        :type postfix: str
        """

        self._postfix = postfix

    @property
    def phones(self) -> List[Phone]:
        """Gets the phones of this AllOfbookingRequestCustomer.


        :return: The phones of this AllOfbookingRequestCustomer.
        :rtype: List[Phone]
        """
        return self._phones

    @phones.setter
    def phones(self, phones: List[Phone]):
        """Sets the phones of this AllOfbookingRequestCustomer.


        :param phones: The phones of this AllOfbookingRequestCustomer.
        :type phones: List[Phone]
        """

        self._phones = phones

    @property
    def email(self) -> str:
        """Gets the email of this AllOfbookingRequestCustomer.

        the email address of the customer  # noqa: E501

        :return: The email of this AllOfbookingRequestCustomer.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this AllOfbookingRequestCustomer.

        the email address of the customer  # noqa: E501

        :param email: The email of this AllOfbookingRequestCustomer.
        :type email: str
        """

        self._email = email

    @property
    def birth_date(self) -> date:
        """Gets the birth_date of this AllOfbookingRequestCustomer.


        :return: The birth_date of this AllOfbookingRequestCustomer.
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date: date):
        """Sets the birth_date of this AllOfbookingRequestCustomer.


        :param birth_date: The birth_date of this AllOfbookingRequestCustomer.
        :type birth_date: date
        """

        self._birth_date = birth_date

    @property
    def address(self) -> Address:
        """Gets the address of this AllOfbookingRequestCustomer.


        :return: The address of this AllOfbookingRequestCustomer.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address: Address):
        """Sets the address of this AllOfbookingRequestCustomer.


        :param address: The address of this AllOfbookingRequestCustomer.
        :type address: Address
        """

        self._address = address

    @property
    def photo(self) -> bytearray:
        """Gets the photo of this AllOfbookingRequestCustomer.

        base64 encoded  # noqa: E501

        :return: The photo of this AllOfbookingRequestCustomer.
        :rtype: bytearray
        """
        return self._photo

    @photo.setter
    def photo(self, photo: bytearray):
        """Sets the photo of this AllOfbookingRequestCustomer.

        base64 encoded  # noqa: E501

        :param photo: The photo of this AllOfbookingRequestCustomer.
        :type photo: bytearray
        """

        self._photo = photo

    @property
    def cards(self) -> List[Card]:
        """Gets the cards of this AllOfbookingRequestCustomer.


        :return: The cards of this AllOfbookingRequestCustomer.
        :rtype: List[Card]
        """
        return self._cards

    @cards.setter
    def cards(self, cards: List[Card]):
        """Sets the cards of this AllOfbookingRequestCustomer.


        :param cards: The cards of this AllOfbookingRequestCustomer.
        :type cards: List[Card]
        """

        self._cards = cards

    @property
    def licenses(self) -> List[License]:
        """Gets the licenses of this AllOfbookingRequestCustomer.


        :return: The licenses of this AllOfbookingRequestCustomer.
        :rtype: List[License]
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses: List[License]):
        """Sets the licenses of this AllOfbookingRequestCustomer.


        :param licenses: The licenses of this AllOfbookingRequestCustomer.
        :type licenses: List[License]
        """

        self._licenses = licenses
