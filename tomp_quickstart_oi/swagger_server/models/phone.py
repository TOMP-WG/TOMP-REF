# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
import re  # noqa: F401,E501
from swagger_server import util


class Phone(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, preferred: bool=None, number: str=None, kind: str=None, type: str=None):  # noqa: E501
        """Phone - a model defined in Swagger

        :param preferred: The preferred of this Phone.  # noqa: E501
        :type preferred: bool
        :param number: The number of this Phone.  # noqa: E501
        :type number: str
        :param kind: The kind of this Phone.  # noqa: E501
        :type kind: str
        :param type: The type of this Phone.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'preferred': bool,
            'number': str,
            'kind': str,
            'type': str
        }

        self.attribute_map = {
            'preferred': 'preferred',
            'number': 'number',
            'kind': 'kind',
            'type': 'type'
        }
        self._preferred = preferred
        self._number = number
        self._kind = kind
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Phone':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The phone of this Phone.  # noqa: E501
        :rtype: Phone
        """
        return util.deserialize_model(dikt, cls)

    @property
    def preferred(self) -> bool:
        """Gets the preferred of this Phone.

        only one phone in this array can have a true in this property  # noqa: E501

        :return: The preferred of this Phone.
        :rtype: bool
        """
        return self._preferred

    @preferred.setter
    def preferred(self, preferred: bool):
        """Sets the preferred of this Phone.

        only one phone in this array can have a true in this property  # noqa: E501

        :param preferred: The preferred of this Phone.
        :type preferred: bool
        """

        self._preferred = preferred

    @property
    def number(self) -> str:
        """Gets the number of this Phone.

        phone number. In case of international usage, always provide the country code.  # noqa: E501

        :return: The number of this Phone.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number: str):
        """Sets the number of this Phone.

        phone number. In case of international usage, always provide the country code.  # noqa: E501

        :param number: The number of this Phone.
        :type number: str
        """

        self._number = number

    @property
    def kind(self) -> str:
        """Gets the kind of this Phone.


        :return: The kind of this Phone.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this Phone.


        :param kind: The kind of this Phone.
        :type kind: str
        """
        allowed_values = ["LANDLINE", "MOBILE"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def type(self) -> str:
        """Gets the type of this Phone.


        :return: The type of this Phone.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Phone.


        :param type: The type of this Phone.
        :type type: str
        """
        allowed_values = ["PRIVATE", "BUSINESS", "OTHER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
