# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.address import Address  # noqa: F401,E501
from swagger_server.models.coordinates import Coordinates  # noqa: F401,E501
from swagger_server import util


class StationInformation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, station_id: str=None, name: str=None, coordinates: Coordinates=None, physical_address: Address=None, cross_street: str=None, region_id: str=None, rental_methods: List[str]=None, rental_url: str=None, rental_url_android: str=None, rental_url_ios: str=None):  # noqa: E501
        """StationInformation - a model defined in Swagger

        :param station_id: The station_id of this StationInformation.  # noqa: E501
        :type station_id: str
        :param name: The name of this StationInformation.  # noqa: E501
        :type name: str
        :param coordinates: The coordinates of this StationInformation.  # noqa: E501
        :type coordinates: Coordinates
        :param physical_address: The physical_address of this StationInformation.  # noqa: E501
        :type physical_address: Address
        :param cross_street: The cross_street of this StationInformation.  # noqa: E501
        :type cross_street: str
        :param region_id: The region_id of this StationInformation.  # noqa: E501
        :type region_id: str
        :param rental_methods: The rental_methods of this StationInformation.  # noqa: E501
        :type rental_methods: List[str]
        :param rental_url: The rental_url of this StationInformation.  # noqa: E501
        :type rental_url: str
        :param rental_url_android: The rental_url_android of this StationInformation.  # noqa: E501
        :type rental_url_android: str
        :param rental_url_ios: The rental_url_ios of this StationInformation.  # noqa: E501
        :type rental_url_ios: str
        """
        self.swagger_types = {
            'station_id': str,
            'name': str,
            'coordinates': Coordinates,
            'physical_address': Address,
            'cross_street': str,
            'region_id': str,
            'rental_methods': List[str],
            'rental_url': str,
            'rental_url_android': str,
            'rental_url_ios': str
        }

        self.attribute_map = {
            'station_id': 'stationId',
            'name': 'name',
            'coordinates': 'coordinates',
            'physical_address': 'physicalAddress',
            'cross_street': 'crossStreet',
            'region_id': 'regionId',
            'rental_methods': 'rentalMethods',
            'rental_url': 'rentalUrl',
            'rental_url_android': 'rentalUrlAndroid',
            'rental_url_ios': 'rentalUrlIOS'
        }
        self._station_id = station_id
        self._name = name
        self._coordinates = coordinates
        self._physical_address = physical_address
        self._cross_street = cross_street
        self._region_id = region_id
        self._rental_methods = rental_methods
        self._rental_url = rental_url
        self._rental_url_android = rental_url_android
        self._rental_url_ios = rental_url_ios

    @classmethod
    def from_dict(cls, dikt) -> 'StationInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The stationInformation of this StationInformation.  # noqa: E501
        :rtype: StationInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def station_id(self) -> str:
        """Gets the station_id of this StationInformation.

        unique identifier of a station  # noqa: E501

        :return: The station_id of this StationInformation.
        :rtype: str
        """
        return self._station_id

    @station_id.setter
    def station_id(self, station_id: str):
        """Sets the station_id of this StationInformation.

        unique identifier of a station  # noqa: E501

        :param station_id: The station_id of this StationInformation.
        :type station_id: str
        """
        if station_id is None:
            raise ValueError("Invalid value for `station_id`, must not be `None`")  # noqa: E501

        self._station_id = station_id

    @property
    def name(self) -> str:
        """Gets the name of this StationInformation.

        public name of the station, could match Content-Language  # noqa: E501

        :return: The name of this StationInformation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this StationInformation.

        public name of the station, could match Content-Language  # noqa: E501

        :param name: The name of this StationInformation.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def coordinates(self) -> Coordinates:
        """Gets the coordinates of this StationInformation.


        :return: The coordinates of this StationInformation.
        :rtype: Coordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates: Coordinates):
        """Sets the coordinates of this StationInformation.


        :param coordinates: The coordinates of this StationInformation.
        :type coordinates: Coordinates
        """
        if coordinates is None:
            raise ValueError("Invalid value for `coordinates`, must not be `None`")  # noqa: E501

        self._coordinates = coordinates

    @property
    def physical_address(self) -> Address:
        """Gets the physical_address of this StationInformation.


        :return: The physical_address of this StationInformation.
        :rtype: Address
        """
        return self._physical_address

    @physical_address.setter
    def physical_address(self, physical_address: Address):
        """Sets the physical_address of this StationInformation.


        :param physical_address: The physical_address of this StationInformation.
        :type physical_address: Address
        """

        self._physical_address = physical_address

    @property
    def cross_street(self) -> str:
        """Gets the cross_street of this StationInformation.

        Cross street of where the station is located. This field is intended to be a descriptive field for human consumption. In cities, this would be a cross street, but could also be a description of a location in a park, etc, should match Content-Language  # noqa: E501

        :return: The cross_street of this StationInformation.
        :rtype: str
        """
        return self._cross_street

    @cross_street.setter
    def cross_street(self, cross_street: str):
        """Sets the cross_street of this StationInformation.

        Cross street of where the station is located. This field is intended to be a descriptive field for human consumption. In cities, this would be a cross street, but could also be a description of a location in a park, etc, should match Content-Language  # noqa: E501

        :param cross_street: The cross_street of this StationInformation.
        :type cross_street: str
        """

        self._cross_street = cross_street

    @property
    def region_id(self) -> str:
        """Gets the region_id of this StationInformation.

        ID of the region where the station operates (see \"systemRegions\")  # noqa: E501

        :return: The region_id of this StationInformation.
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id: str):
        """Sets the region_id of this StationInformation.

        ID of the region where the station operates (see \"systemRegions\")  # noqa: E501

        :param region_id: The region_id of this StationInformation.
        :type region_id: str
        """

        self._region_id = region_id

    @property
    def rental_methods(self) -> List[str]:
        """Gets the rental_methods of this StationInformation.

        Array of enumerables containing the payment methods accepted at this station.  # noqa: E501

        :return: The rental_methods of this StationInformation.
        :rtype: List[str]
        """
        return self._rental_methods

    @rental_methods.setter
    def rental_methods(self, rental_methods: List[str]):
        """Sets the rental_methods of this StationInformation.

        Array of enumerables containing the payment methods accepted at this station.  # noqa: E501

        :param rental_methods: The rental_methods of this StationInformation.
        :type rental_methods: List[str]
        """
        allowed_values = ["KEY", "CREDITCARD", "PAYPASS", "APPLEPAY", "ANDROIDPAY", "TRANSITCARD", "ACCOUNTNUMBER", "PHONE", "OTHER"]  # noqa: E501
        if not set(rental_methods).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `rental_methods` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(rental_methods) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._rental_methods = rental_methods

    @property
    def rental_url(self) -> str:
        """Gets the rental_url of this StationInformation.

        web uri for renting assets at this station. Only added to be consistent with GBFS 2.0.  # noqa: E501

        :return: The rental_url of this StationInformation.
        :rtype: str
        """
        return self._rental_url

    @rental_url.setter
    def rental_url(self, rental_url: str):
        """Sets the rental_url of this StationInformation.

        web uri for renting assets at this station. Only added to be consistent with GBFS 2.0.  # noqa: E501

        :param rental_url: The rental_url of this StationInformation.
        :type rental_url: str
        """

        self._rental_url = rental_url

    @property
    def rental_url_android(self) -> str:
        """Gets the rental_url_android of this StationInformation.

        android uri for renting assets at this station. Only added to be consistent with GBFS 2.0.  # noqa: E501

        :return: The rental_url_android of this StationInformation.
        :rtype: str
        """
        return self._rental_url_android

    @rental_url_android.setter
    def rental_url_android(self, rental_url_android: str):
        """Sets the rental_url_android of this StationInformation.

        android uri for renting assets at this station. Only added to be consistent with GBFS 2.0.  # noqa: E501

        :param rental_url_android: The rental_url_android of this StationInformation.
        :type rental_url_android: str
        """

        self._rental_url_android = rental_url_android

    @property
    def rental_url_ios(self) -> str:
        """Gets the rental_url_ios of this StationInformation.

        ios uri for renting assets at this station. Only added to be consistent with GBFS 2.0.  # noqa: E501

        :return: The rental_url_ios of this StationInformation.
        :rtype: str
        """
        return self._rental_url_ios

    @rental_url_ios.setter
    def rental_url_ios(self, rental_url_ios: str):
        """Sets the rental_url_ios of this StationInformation.

        ios uri for renting assets at this station. Only added to be consistent with GBFS 2.0.  # noqa: E501

        :param rental_url_ios: The rental_url_ios of this StationInformation.
        :type rental_url_ios: str
        """

        self._rental_url_ios = rental_url_ios
