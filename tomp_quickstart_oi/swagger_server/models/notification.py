# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.asset import Asset  # noqa: F401,E501
from swagger_server import util


class Notification(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, minutes: float=None, asset: Asset=None, comment: str=None):  # noqa: E501
        """Notification - a model defined in Swagger

        :param type: The type of this Notification.  # noqa: E501
        :type type: str
        :param minutes: The minutes of this Notification.  # noqa: E501
        :type minutes: float
        :param asset: The asset of this Notification.  # noqa: E501
        :type asset: Asset
        :param comment: The comment of this Notification.  # noqa: E501
        :type comment: str
        """
        self.swagger_types = {
            'type': str,
            'minutes': float,
            'asset': Asset,
            'comment': str
        }

        self.attribute_map = {
            'type': 'type',
            'minutes': 'minutes',
            'asset': 'asset',
            'comment': 'comment'
        }
        self._type = type
        self._minutes = minutes
        self._asset = asset
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt) -> 'Notification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The notification of this Notification.  # noqa: E501
        :rtype: Notification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this Notification.


        :return: The type of this Notification.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Notification.


        :param type: The type of this Notification.
        :type type: str
        """
        allowed_values = ["VEHICLE_NOT_AVAILABLE", "USER_NO_SHOW", "ETA", "MESSAGE_TO_DRIVER", "MESSAGE_TO_END_USER", "OTHER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def minutes(self) -> float:
        """Gets the minutes of this Notification.

        in case of ETA, the number of minutes until arrival at the pickup location  # noqa: E501

        :return: The minutes of this Notification.
        :rtype: float
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes: float):
        """Sets the minutes of this Notification.

        in case of ETA, the number of minutes until arrival at the pickup location  # noqa: E501

        :param minutes: The minutes of this Notification.
        :type minutes: float
        """

        self._minutes = minutes

    @property
    def asset(self) -> Asset:
        """Gets the asset of this Notification.


        :return: The asset of this Notification.
        :rtype: Asset
        """
        return self._asset

    @asset.setter
    def asset(self, asset: Asset):
        """Sets the asset of this Notification.


        :param asset: The asset of this Notification.
        :type asset: Asset
        """

        self._asset = asset

    @property
    def comment(self) -> str:
        """Gets the comment of this Notification.

        free text, should match Content-Language  # noqa: E501

        :return: The comment of this Notification.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this Notification.

        free text, should match Content-Language  # noqa: E501

        :param comment: The comment of this Notification.
        :type comment: str
        """

        self._comment = comment
