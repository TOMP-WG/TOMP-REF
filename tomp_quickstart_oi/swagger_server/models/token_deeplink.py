# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.token_data import TokenData  # noqa: F401,E501
from swagger_server import util


class TokenDeeplink(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, token_type: str=None, url: str=None, known_parameters: List[str]=None):  # noqa: E501
        """TokenDeeplink - a model defined in Swagger

        :param token_type: The token_type of this TokenDeeplink.  # noqa: E501
        :type token_type: str
        :param url: The url of this TokenDeeplink.  # noqa: E501
        :type url: str
        :param known_parameters: The known_parameters of this TokenDeeplink.  # noqa: E501
        :type known_parameters: List[str]
        """
        self.swagger_types = {
            'token_type': str,
            'url': str,
            'known_parameters': List[str]
        }

        self.attribute_map = {
            'token_type': 'tokenType',
            'url': 'url',
            'known_parameters': 'knownParameters'
        }
        self._token_type = token_type
        self._url = url
        self._known_parameters = known_parameters

    @classmethod
    def from_dict(cls, dikt) -> 'TokenDeeplink':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tokenDeeplink of this TokenDeeplink.  # noqa: E501
        :rtype: TokenDeeplink
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token_type(self) -> str:
        """Gets the token_type of this TokenDeeplink.


        :return: The token_type of this TokenDeeplink.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type: str):
        """Sets the token_type of this TokenDeeplink.


        :param token_type: The token_type of this TokenDeeplink.
        :type token_type: str
        """
        if token_type is None:
            raise ValueError("Invalid value for `token_type`, must not be `None`")  # noqa: E501

        self._token_type = token_type

    @property
    def url(self) -> str:
        """Gets the url of this TokenDeeplink.

        the base deeplink url for the MP app. Can be extended by the 'knownParamaters'. Including the scheme.  # noqa: E501

        :return: The url of this TokenDeeplink.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this TokenDeeplink.

        the base deeplink url for the MP app. Can be extended by the 'knownParamaters'. Including the scheme.  # noqa: E501

        :param url: The url of this TokenDeeplink.
        :type url: str
        """

        self._url = url

    @property
    def known_parameters(self) -> List[str]:
        """Gets the known_parameters of this TokenDeeplink.


        :return: The known_parameters of this TokenDeeplink.
        :rtype: List[str]
        """
        return self._known_parameters

    @known_parameters.setter
    def known_parameters(self, known_parameters: List[str]):
        """Sets the known_parameters of this TokenDeeplink.


        :param known_parameters: The known_parameters of this TokenDeeplink.
        :type known_parameters: List[str]
        """

        self._known_parameters = known_parameters
